MODULE InvoicePrintRu;

REQUIRE InvoicePrint, InvoicePrintShipment, InvoicePack, LegalEntityRu, UomRu,
        Individual, LocationEmployeeRu, BillCustomsDeclaration, BankRu;

NAMESPACE Invoicing;

innCompany (Invoice i) = inn(company(i));
okpoCompany (Invoice i) = okpo(company(i));
kppCompany (Invoice i) = kpp(company(i));

innCustomer (Invoice i) = inn(customer(i));
okpoCustomer (Invoice i) = okpo(customer(i));
kppCustomer (Invoice i) = kpp(customer(i));

legalCodeUom (InvoiceLine l) = legalCode(uom(l));

correspondentAccountCompany (Invoice l) = correspondentAccount(bankCompanyAccount(l));

idCustomsDeclaration(InvoiceLine l) = id(customsDeclaration(item(l), company(invoice(l)), dateTime(invoice(l))));

EXTEND FORM printInvoice
    PROPERTIES(o) innCompany, okpoCompany, kppCompany, innCustomer, okpoCustomer, kppCustomer, correspondentAccountCompany
    
    PROPERTIES(l) legalCodeUom, idCustomsDeclaration
    PROPERTIES nameSalesUom = namePackUom(l) IF packQuantity(l), packQuantity(l), packRatio = NUMERIC[16,3](quantity(l) / packQuantity(l))
;

// invoice
DESIGN invoice {
    details {
        NEW invoicePrint {
            caption = 'Print';
            showIf = countInvoiceTemplate(type(i));
        }
    }
}

@defineEmployee(allowed, 'Отпуск разрешил', invoice, i, invoicePrint);
@defineEmployee(accountant, 'Главный (старший) бухгалтер', invoice, i, invoicePrint);
@defineEmployee(performed, 'Отпуск произвел', invoice, i, invoicePrint);

WHEN LOCAL SETCHANGED(location(Invoice i)) DO {
    allowed(i) <- GROUP LAST allowed(Location parent) ORDER DESC level(location(i),parent);
    accountant(i) <- GROUP LAST accountant(Location parent) ORDER DESC level(location(i),parent);
    performed(i) <- GROUP LAST performed(Location parent) ORDER DESC level(location(i),parent);
}

// print

EXTEND FORM printInvoice
    PROPERTIES(o) positionAllowed, nameAllowed,
                  positionAccountant, nameAccountant,
                  positionPerformed, namePerformed 
;

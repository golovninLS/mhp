MODULE ServiceAccountGoogle;

REQUIRE Time, Utils, BillProject, AccountBillProject;

NAMESPACE IntegrationGoogle;

// не ниже 5-й версии

CLASS ServiceGoogleAccount 'Сервисный аккаунт Google';
TABLE serviceGoogleAccount(ServiceGoogleAccount);

clientEmail 'Email' = DATA STRING[255] (ServiceGoogleAccount) NONULL IN id;
serviceAccount = GROUP AGGR ServiceGoogleAccount a BY clientEmail(a);

credentials = DATA FILE (ServiceGoogleAccount);

uploadCredentials 'Загрузить' (){
    NEWSESSION INPUT f = FILE DO{
        LOCAL issuer = STRING[255]();
        IMPORT JSON FROM f TO() issuer = client_email;
        IF issuer() AND NOT serviceAccount(issuer()) THEN NEW a = ServiceGoogleAccount{
            clientEmail(a) <- issuer();
            credentials(a) <- f;
            APPLY;
        }
    }
}

signedJWT = DATA LOCAL STRING ();
signJWT INTERNAL 'org.mycompany.integration.JWTSign' (STRING, STRING, STRING);

tokenBearer = DATA LOCAL STRING();
headersServiceAccount (STRING s) = IF s = 'Authorization' THEN 'Bearer ' + tokenBearer();

authServiceAccount(ServiceGoogleAccount a){
    tokenBearer() <- NULL;

    LOCAL issuer = STRING();
    LOCAL key_id = STRING();
    LOCAL private_key = STRING();
    LOCAL token_uri = STRING();

    IMPORT JSON FROM credentials(a) TO() issuer = client_email, key_id = private_key_id,
            private_key = private_key, token_uri = token_uri;
    IF issuer() AND key_id() AND private_key() THEN {

        LOCAL headers = STRING ();
        LOCAL payload = STRING();
        headers() <- STRING(JSON FROM kid = key_id(), typ = 'JWT');
        payload() <- STRING(JSON FROM aud = token_uri(), iss = issuer(), iat = getSeconds(currentZDateTime()),
        scope = 'https://www.googleapis.com/auth/bigquery', exp = getSeconds(currentZDateTime()) + 360);
        signJWT(payload(), private_key(), headers());

        LOCAL response = FILE();
        EXTERNAL HTTP POST token_uri() PARAMS
            JSON FROM assertion = signedJWT(),
            grant_type = 'urn:ietf:params:oauth:grant-type:jwt-bearer'
            TO response
        ;
        IMPORT JSON FROM response() TO() tokenBearer = access_token;
    }ELSE MESSAGE 'Некорректные данные авторизации';
}

testAuthServieAccount 'Тест авторизации' (ServiceGoogleAccount a){
    authServiceAccount(a);
    IF tokenBearer() THEN MESSAGE 'Тест авторизации пройден успешно';
    ELSE MESSAGE 'Ошибка! Тест не пройден'
    ;
}

EXTEND FORM integrationData
    OBJECTS serviceAccount = ServiceGoogleAccount
    PROPERTIES (serviceAccount) clientEmail READONLY, testAuthServieAccount TOOLBAR DRAW serviceAccount
    PROPERTIES uploadCredentials() TOOLBAR DRAW serviceAccount
;

DESIGN integrationData{
    pane{
        NEW serviceAccountGoogle{
            caption = 'ServiceAccountGoogle';
            tabbed = TRUE;
            NEW serviceAccountsGoogle{
                caption = 'Аккаунты';
                MOVE BOX (serviceAccount);

                NEW detailAccountsGoogle{
                    fill = 1;
                    tabbed = TRUE;
                }
            }
        }
    }
}
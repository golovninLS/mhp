MODULE ServiceAccountGoogle;

REQUIRE Time, Utils, BillProject, AccountBillProject;

NAMESPACE IntegrationGoogle;

// не ниже 5-й версии

CLASS ServiceGoogleAccount 'Сервисный аккаунт Google';
TABLE serviceGoogleAccount(ServiceGoogleAccount);

clientEmail 'Email' = DATA STRING[255] (ServiceGoogleAccount) NONULL IN id;
serviceAccount = GROUP AGGR ServiceGoogleAccount a BY clientEmail(a);

credentials = DATA FILE (ServiceGoogleAccount);

uploadCredentials 'Загрузить' (){
    NEWSESSION INPUT f = FILE DO{
        LOCAL issuer = STRING[255]();
        IMPORT JSON FROM f TO() issuer = client_email;
        IF issuer() AND NOT serviceAccount(issuer()) THEN NEW a = ServiceGoogleAccount{
            clientEmail(a) <- issuer();
            credentials(a) <- f;
            APPLY;
        }
    }
}

signedJWT = DATA LOCAL STRING ();
signJWT INTERNAL 'org.mycompany.integration.JWTSign' (STRING, STRING, STRING);

tokenBearer = DATA LOCAL STRING();
headersServiceAccount (STRING s) = IF s = 'Authorization' THEN 'Bearer ' + tokenBearer();

authServiceAccount(ServiceGoogleAccount a){
    tokenBearer() <- NULL;

    LOCAL issuer = STRING();
    LOCAL key_id = STRING();
    LOCAL private_key = STRING();
    LOCAL token_uri = STRING();

    IMPORT JSON FROM credentials(a) TO() issuer = client_email, key_id = private_key_id,
            private_key = private_key, token_uri = token_uri;
    IF issuer() AND key_id() AND private_key() THEN {

        LOCAL headers = STRING ();
        LOCAL payload = STRING();
        headers() <- STRING(JSON FROM kid = key_id(), typ = 'JWT');
        payload() <- STRING(JSON FROM aud = token_uri(), iss = issuer(), iat = getSeconds(currentZDateTime()),
        scope = 'https://www.googleapis.com/auth/bigquery', exp = getSeconds(currentZDateTime()) + 360);
        signJWT(payload(), private_key(), headers());

        LOCAL response = FILE();
        EXTERNAL HTTP POST token_uri() PARAMS
            JSON FROM assertion = signedJWT(),
            grant_type = 'urn:ietf:params:oauth:grant-type:jwt-bearer'
            TO response
        ;
        IMPORT JSON FROM response() TO() tokenBearer = access_token;
    }ELSE MESSAGE 'Некорректные данные авторизации';
}

testAuthServieAccount 'Тест авторизации' (ServiceGoogleAccount a){
    authServiceAccount(a);
    IF tokenBearer() THEN MESSAGE 'Тест авторизации пройден успешно';
    ELSE MESSAGE 'Ошибка! Тест не пройден'
    ;
}

EXTEND FORM integrationData
    OBJECTS serviceAccount = ServiceGoogleAccount
    PROPERTIES (serviceAccount) clientEmail READONLY, testAuthServieAccount TOOLBAR DRAW serviceAccount
    PROPERTIES uploadCredentials() TOOLBAR DRAW serviceAccount
;

DESIGN integrationData{
    pane{
        NEW serviceAccountGoogle{
            caption = 'ServiceAccountGoogle';
            tabbed = TRUE;
            NEW serviceAccountsGoogle{                
                caption = 'Аккаунты';
                MOVE BOX (serviceAccount);

                NEW detailAccountsGoogle{
                    fill = 1;
                    tabbed = TRUE;
                }
            }
        }
    }
}

// Таблицы Bigquery
// BillProject

GROUP schema;
GROUP tableReference;

mode = DATA LOCAL STRING(INTEGER);
name = DATA LOCAL STRING(INTEGER);
type = DATA LOCAL STRING(INTEGER);

datasetId = DATA LOCAL STRING();
tableId = DATA LOCAL STRING();
projectId = DATA LOCAL STRING();

FORM table    
    OBJECTS fields = INTEGER IN schema
    PROPERTIES(fields) mode, name, type
    FILTERS name(fields)
    
    PROPERTIES() IN tableReference datasetId, tableId, projectId 
;

fillFieldsTable (ServiceGoogleAccount a, STRING projectId, STRING datasetId) {
    projectId() <- projectId;
    datasetId() <- datasetId;    

    // nameAccountObject - Объект затрат
    mode(1) <- 'NULLABLE';
    name(1) <- 'nameAccountObject';
    type(1) <- 'STRING';

    // nameSalesAccount - Статья затрат
    mode(2) <- 'NULLABLE';
    name(2) <- 'nameSalesAccount';
    type(2) <- 'STRING';
    
    // numberMonthAccount - Месяц
    mode(3) <- 'NULLABLE';
    name(3) <- 'numberMonthAccount';
    type(3) <- 'INTEGER';
    
    // base - База распределения
    mode(4) <- 'NULLABLE';
    name(4) <- 'base';
    type(4) <- 'NUMERIC';

    // untaxedAmount - Netto
    mode(5) <- 'NULLABLE';
    name(5) <- 'untaxedAmount';
    type(5) <- 'NUMERIC';
    
    // taxAmount - Vat
    mode(6) <- 'NULLABLE';
    name(6) <- 'taxAmount';
    type(6) <- 'NUMERIC';
    
    // amount - Brutto
    mode(7) <- 'NULLABLE';
    name(7) <- 'amount';
    type(7) <- 'NUMERIC';
    
    // nameVendor - Поставщик(из фактуры)
    mode(8) <- 'NULLABLE';
    name(8) <- 'nameVendor';
    type(8) <- 'STRING';
    
    // nameCompany - Компания (из фактуры)
    mode(9) <- 'NULLABLE';
    name(9) <- 'nameCompany';
    type(9) <- 'STRING';
    
    // date - Дата (из фактуры)
    mode(10) <- 'NULLABLE';
    name(10) <- 'date';
    type(10) <- 'DATE';
    
    // number - Номер(из фактуры)
    mode(11) <- 'NULLABLE';
    name(11) <- 'number';
    type(11) <- 'STRING';

    // number - Номер(из фактуры)
    mode(12) <- 'NULLABLE';
    name(12) <- 'billProjectId';
    type(12) <- 'STRING';
    
    EXPORT table JSON;

    fileToString(exportFile());
}

existBillProject = DATA LOCAL BOOLEAN ();

getTable (ServiceGoogleAccount a, STRING projectId, STRING datasetId) {
    authServiceAccount(a);
    tableId() <- 'BillProject';    
    
    LOCAL response = FILE ();
    TRY {
        EXTERNAL HTTP GET 'https://bigquery.googleapis.com/bigquery/v2/projects/' + projectId + '/datasets/' + datasetId + '/tables/' + tableId()
            HEADERS headersServiceAccount PARAMS exportFile() TO response;
        
        existBillProject() <- TRUE;
    }
}

insertTable (ServiceGoogleAccount a, STRING projectId, STRING datasetId) {
    authServiceAccount(a);

    fillFieldsTable(a, projectId, datasetId);
    LOCAL response = FILE ();

    TRY {
        EXTERNAL HTTP POST 'https://bigquery.googleapis.com/bigquery/v2/projects/' + projectId + '/datasets/' + datasetId + '/tables'
            HEADERS headersServiceAccount PARAMS exportFile() TO response;

        fileToString(response());
        
        MESSAGE 'Таблица создана' NOWAIT;
    } CATCH {
        fileToString(response());
        throwException(CONCAT ' : ', 'insertTable', messageCaughtException(), resultString());
    }
}

billProjectId(BillProject bp) = STRING(LONG(bp));

updateDate = DATA DATETIME (BillProject);
exportDate = DATA DATETIME (BillProject);

WHEN CHANGED(nameAccountObject(BillProject bp)) OR 
     CHANGED(nameSalesAccount(bp)) OR
     CHANGED(numberMonthAccount(bp)) OR
     CHANGED(base(bp)) OR
     CHANGED(untaxedAmount(bp)) OR
     CHANGED(taxAmount(bp)) OR
     CHANGED(amount(bp)) OR
     CHANGED(nameVendor(bp)) OR
     CHANGED(nameCompany(bp)) OR
     CHANGED(date(bp)) OR
     CHANGED(number(bp)) DO {
    updateDate(bp) <- currentDateTime();
}

deletedBillProjectId = DATA STRING (STRING);

WHEN DROPPED(BillProject bp IS BillProject) DO {
    deletedBillProjectId(billProjectId(bp)) <- billProjectId(bp);
}

GROUP json;

needToExport = DATA LOCAL BOOLEAN (BillProject);
needToUpdate = DATA LOCAL BOOLEAN (BillProject);

timeoutMs = DATA LOCAL NUMERIC();
query = DATA LOCAL STRING();
useLegacySql = DATA LOCAL BOOLEAN ();

FORM queryDataTable
    PROPERTIES() timeoutMs, query, useLegacySql;

dataTableQuery (ServiceGoogleAccount a, STRING projectId, STRING datasetId){
    timeoutMs() <- 10000;
       
    IF NOT query() THEN {
        MESSAGE 'Отсутствует тело запроса SQL' WAIT;
        RETURN;
    }    

    EXPORT queryDataTable JSON;
    fileToString(exportFile());
    resultString() <- replace(resultString(), '\}', ', "useLegacySql": false\}');
    stringToFile(resultString());
    exportFile() <- resultFile();

    LOCAL response = FILE ();

    TRY {
        EXTERNAL HTTP POST 'https://bigquery.googleapis.com/bigquery/v2/projects/' + projectId + '/queries'
            HEADERS headersServiceAccount PARAMS exportFile() TO response;

        deletedBillProjectId(STRING s) <- NULL;
        fileToString(response());
    } CATCH {
        fileToString(response());
        throwException(CONCAT ' : ', 'dataTableQuery', messageCaughtException(), resultString());
    }
}

deleteDataTable (ServiceGoogleAccount a, STRING projectId, STRING datasetId){
    needToUpdate(BillProject bp) <- TRUE IF updateDate(bp) >= exportDate(bp) AND exportDate(bp);

    LOCAL listDeleted = STRING ();
    listDeleted() <- (CONCAT ', ',
        (GROUP CONCAT '\'' + billProjectId(BillProject bp) + '\'' IF needToUpdate(bp), ', ' ORDER bp), // удаление обновляемых
        (GROUP CONCAT '\'' + deletedBillProjectId(STRING s) + '\'' IF deletedBillProjectId(s), ', ' ORDER s));// удаление удаленных данных
    
    IF NOT listDeleted() THEN RETURN;
    
    query() <- 'DELETE FROM ' + datasetId + '.BillProject WHERE billProjectId IN (' + listDeleted() + ');';

    dataTableQuery(a, projectId, datasetId);
    exportDate(BillProject bp) <- currentDateTime() WHERE needToUpdate(bp);
}

formatDate(BillProject bp) = toChar(date(bp), 'YYYY-MM-DD');

insertDataTable  (ServiceGoogleAccount a, STRING projectId, STRING datasetId){
    authServiceAccount(a);

    needToExport(BillProject bp) <- TRUE IF (needToUpdate(bp) OR NOT exportDate(bp)) AND bp IS BillProject;

    IF NOT GROUP MIN needToExport(BillProject bp) THEN {
        RETURN;
    }

    LOCAL response = FILE ();
    
    LOCAL exportFieldList = STRING ();
    LOCAL exportValueList = STRING ();

    exportFieldList() <- 'nameAccountObject, nameSalesAccount , numberMonthAccount, base, untaxedAmount, taxAmount, amount, nameVendor, nameCompany, date, number, billProjectId';
    
    exportValueList () <- GROUP CONCAT
        ( CONCAT ', ',
            (OVERRIDE (CONCAT '', '(\'', nameAccountObject(BillProject bp) , '\''), 'NULL'),
            (OVERRIDE (CONCAT '', '\'', nameSalesAccount(bp) , '\''), 'NULL'),
            (OVERRIDE STRING (numberMonthAccount(bp)), 'NULL'),
            (OVERRIDE STRING (base(bp)), 'NULL'),
            (OVERRIDE STRING (untaxedAmount(bp)), 'NULL'),
            (OVERRIDE STRING (taxAmount(bp)), 'NULL'),
            (OVERRIDE STRING (amount(bp)), 'NULL'),
            (OVERRIDE (CONCAT '', '\'', replace(nameVendor(bp), '\'', ''), '\''), 'NULL'),
            (OVERRIDE (CONCAT '', '\'', replace(nameCompany(bp), '\'', ''), '\''), 'NULL'),
            (OVERRIDE (CONCAT '', '\'', date(bp), '\''), 'NULL'),
            (OVERRIDE (CONCAT '', '\'', replace(number(bp), '\'', ''), '\''), 'NULL'),
            (OVERRIDE (CONCAT '', '\'', replace(billProjectId(bp), '\'', '') , '\')'), 'NULL')
        )
        IF needToExport(bp), ', ' ORDER bp;

    query() <- 'INSERT INTO ' + datasetId + '.BillProject (' + exportFieldList() + ') VALUES ' + exportValueList();
    dataTableQuery(a, projectId, datasetId);
    exportDate(BillProject bp) <- currentDateTime() WHERE needToExport(bp);
}

FORM dataTable
    OBJECTS rows = BillProject

    //    PROPERTIES(rows) insertId
    PROPERTIES(rows) IN json nameAccountObject, nameSalesAccount, numberMonthAccount, base, untaxedAmount, taxAmount, 
        amount, nameVendor, nameCompany, formatDate EXTID 'date', number, billProjectId
    FILTERS needToExport(rows)
;



insertUpdateDataTable 'Экспорт таблицы BillProject (BigQuery)' (ServiceGoogleAccount a, STRING projectId, STRING datasetId) {
    getTable(a, projectId, datasetId);
    IF NOT existBillProject() THEN insertTable(a, projectId, datasetId);

    deleteDataTable(a, projectId, datasetId); // удаление изменившихся записей
    insertDataTable(a, projectId, datasetId); // экспорт изменившихся и новых записей
    
    MESSAGE 'Экспорт завершен' NOWAIT;
}

serviceGoogleAccountBP 'Сервисный аккаунт для выгрузки BillProject' = DATA ServiceGoogleAccount();
clientEmailServiceGoogleAccountBP 'Сервисный аккаунт для выгрузки BillProject'  = clientEmail(serviceGoogleAccountBP());
bigQueryProgectId 'Проект BigQuery для выгрузки BillProject' = DATA STRING();
bigqueryDatasetId 'Набор данных BigQuery для выгрузки BillProject' = DATA STRING();

insertUpdateDataTable 'Экспорт таблицы BillProject (BigQuery)' () {
    insertUpdateDataTable(serviceGoogleAccountBP(), bigQueryProgectId(), bigqueryDatasetId());
}

EXTEND FORM integrationData
    PROPERTIES () PANEL clientEmailServiceGoogleAccountBP , bigQueryProgectId, bigqueryDatasetId, insertUpdateDataTable
;

DESIGN integrationData{
    serviceAccountGoogle {        
        NEW bigqueryProject{
            caption = 'BigQuery';
            horizontal = FALSE;
//            MOVE BOX (bigqueryProject);
//            MOVE BOX (bigqueryDataset);

            MOVE PROPERTY (clientEmailServiceGoogleAccountBP());
            MOVE PROPERTY (bigQueryProgectId());
            MOVE PROPERTY (bigqueryDatasetId());
            MOVE PROPERTY (insertUpdateDataTable());
        }
    }
}
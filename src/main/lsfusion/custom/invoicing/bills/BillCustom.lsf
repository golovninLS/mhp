MODULE BillCustom;

REQUIRE BillReceipt, BillProject, ProjectBill, BillDone;

NAMESPACE Invoicing;

// default item

defaultBillItem = DATA Item ();
nameDefaultBillItem 'Default bill item' = name(defaultBillItem());

EXTEND FORM options
    PROPERTIES() nameDefaultBillItem
;

DESIGN options {
    commons {
        MOVE PROPERTY(nameDefaultBillItem());
    }
}

changeItems (Bill b) {
    DIALOG items OBJECTS i INPUT LIST name(i) DO {
        IF NOT countBillLine(b) THEN
            NEW l = BillLine {
                bill(l) <- b;
                item(l) <- i;
                in(l, defaultTax()) <- TRUE;
            }
        ELSE
            item(BillLine l) <- i WHERE bill(l) = b AND NOT item(l) IS Product;
        in(BillLine l, defaultTax()) <- TRUE WHERE bill(l) = b;
    }
}
changeAmount(Bill b){
    INPUT a = NUMERIC[14,2] DO{
        IF NOT countBillLine(b) THEN
            NEW l = BillLine {
                bill(l) <- b;
                item(l) <- defaultBillItem();
                in(l, defaultTax()) <- TRUE;
                taxAmount(defaultTax(), l) <- round2([((X / (1 + Y / 100)) - X) * -1](a, value(defaultTax())));
                untaxedAmount(l) <- a (-) taxAmount(defaultTax(), l);
            }
        ELSE{
            in(BillLine l, defaultTax()) <- TRUE WHERE bill(l) = b;
            taxAmount(defaultTax(), BillLine l) <- round2([((X / (1 + Y / 100)) - X) * -1](a, value(defaultTax()))) WHERE bill(l) = b;;
            untaxedAmount(BillLine l) <- a (-) taxAmount(defaultTax(), l) WHERE bill(l) = b;
        }
    }
}

changeUntaxedAmount (Bill b) {
    INPUT a = untaxedAmount(b) DO {
        LOCAL sum = NUMERIC[14,2]();
        IF a > amount(b) THEN sum() <- amount(b); ELSE sum() <- a;
        IF NOT countBillLine(b) THEN
            NEW l = BillLine {
                bill(l) <- b;
                item(l) <- defaultBillItem();
                taxAmount(defaultTax(), l) <- amount(b) (-) sum();
                untaxedAmount(l) <- sum();
            }
        ELSE
            taxAmount(defaultTax(), BillLine l) <- (amount(b) (-) sum()) WHERE bill(l) = b;
        untaxedAmount(BillLine l) <- sum() WHERE bill(l) = b;
    }
}

changeTaxAmount (Tax t, Bill b) {
    INPUT a = taxAmount(t, b) DO {
        IF NOT countBillLine(b) THEN
            NEW l = BillLine {
                bill(l) <- b;
                item(l) <- defaultBillItem();
                in(l, t) <- TRUE;
                taxAmount(t, l) <- a;
            }
        ELSE {
            in (BillLine l, t) <- TRUE IF a WHERE bill(l) = b;
            taxAmount(t, BillLine l) <- a WHERE bill(l) = b;
        }
    }
}
changeDueDate(Bill b){
    INPUT d = DATE DO dueDateTime(b) <- DATETIME(d);
}
changeDate(Bill b){
    INPUT d = DATE DO dateTime(b) <- DATETIME(d);
}

EXTEND FORM bill
    OBJECTS bt = Tax

    PROPERTIES uta 'Netto' = untaxedAmount(b) ON CHANGE changeUntaxedAmount(b),
        utt = taxAmount(bt, b) COLUMNS (bt) HEADER name(bt) READONLY,
        amn 'Brutto' = amount(b) ON CHANGE changeAmount(b)
    PROPERTIES (b) 'Pay before' = dueDate ON CHANGE changeDueDate(b), date ON CHANGE changeDate(b)
;

DESIGN bill {
    header {
        headerLeft {
            MOVE PROPERTY(date(b)) AFTER PROPERTY(number(b));
            MOVE PROPERTY(dueDate(b)) AFTER PROPERTY(date(b));
        }
        NEW headerLine AFTER headerRight {
            MOVE PROPERTY(uta);
            MOVE PROPERTY(utt);
            MOVE PROPERTY(amn);
        }
    }
    OBJECTS {
        BOX(r){
            showIf = countReceipts(b);
        }
        lines{
            showIf = countReceipts(b);
        }
        REMOVE search;
        REMOVE detailsInformation;
        REMOVE PROPERTY (nameProject(b));
        REMOVE PROPERTY (dueDateTime(b));
        REMOVE PROPERTY (dateTime(b));
        REMOVE PROPERTY (dateTime(b));
        MOVE PROPERTY(note(b)) AFTER header { alignment = STRETCH; }
    }
}

uniqueNumbers 'Контроль уникальности номера фактуры в рамках организации' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES() uniqueNumbers
;

DESIGN options {
    commons {
        MOVE PROPERTY(uniqueNumbers());
    }
}

CONSTRAINT (SETCHANGED(number(Bill b)) OR SETCHANGED(vendor(b))) AND uniqueNumbers() AND (GROUP SUM 1 IF number(b) == number(Bill bb) AND vendor(b) == vendor(bb) AND NOT b == bb)
    MESSAGE 'Совпадение номера фактур в рамках одной организации';

EXTEND FORM bills
    PROPERTIES(b) READONLYIF isReadonly() date AFTER number(b), 'Pay before' = dueDate AFTER namePaymentTerms(b)

    PROPERTIES GRID openFile1(b) DISABLEIF NOT file1(b), openFile2(b) DISABLEIF NOT file2(b), openFile3(b) DISABLEIF NOT file3(b)
;

DESIGN bills {
    PROPERTY (dateTime(b)) {hide = TRUE;};
    PROPERTY (dueDateTime(b)) {hide = TRUE;};
}

DESIGN bills {
    PROPERTY (untaxedAmount(b)) { pattern = '#,##0.00##'; }
    PROPERTY (taxAmount(b)) { pattern = '#,##0.00##'; }
    PROPERTY (amount(b)) { pattern = '#,##0.00##'; }
}

DESIGN bill {
    PROPERTY (untaxedAmount(b)) { pattern = '#,##0.00##'; }
    PROPERTY (taxAmount(b)) { pattern = '#,##0.00##'; }
    PROPERTY (amount(b)) { pattern = '#,##0.00##'; }

    PROPERTY (untaxedAmount(bp)) { pattern = '#,##0.00##'; }
    PROPERTY (taxAmount(bpt, bp)) { pattern = '#,##0.00##'; }
    PROPERTY (amount(bp)) { pattern = '#,##0.00##'; }

    PROPERTY (price(l)) { pattern = '#,##0.00##'; }
    PROPERTY (taxes(l)) { pattern = '#,##0.00##'; }
    PROPERTY (amount(l)) { pattern = '#,##0.00##'; }
    PROPERTY (taxAmount(l)) { pattern = '#,##0.00##'; }
    PROPERTY (untaxedAmount(l)) { pattern = '#,##0.00##'; }
}

paymentDate 'Date of payment' = DATA DATE (Bill);

EXTEND FORM bill PROPERTIES paymentDate(b);

DESIGN bill {
    headerLeft {
        MOVE PROPERTY (paymentDate(b)) AFTER PROPERTY (dueDate(b));
    }
}

WHEN SETCHANGED(status(Bill b)) AND done(b) DO paymentDate(b) <- currentDate();
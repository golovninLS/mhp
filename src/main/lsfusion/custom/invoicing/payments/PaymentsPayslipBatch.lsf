MODULE PaymentsPayslipBatch;

REQUIRE PaymentsDashboardCustom, PayslipBatch, BankAccount, CashAccount;

NAMESPACE Invoicing;

CLASS TypePaymentPayslip 'Type payment payslip';
name 'Name' = DATA STRING[20] (TypePaymentPayslip);

EXTEND FORM HumanResources.options
    OBJECTS tp = TypePaymentPayslip
    PROPERTIES (tp) name
    PROPERTIES (tp) NEW, DELETE 
;

DESIGN HumanResources.options{
    tabbedPane{
        NEW typePayment{
            caption = 'Type payment payslip';
            MOVE BOX (tp);
        }
    }
}

amount 'Сумма' = DATA NUMERIC[16,2](TypePaymentPayslip, Account, Payslip) CHARWIDTH 12;
amount 'Сумма' (TypePaymentPayslip t, Payslip p) = GROUP SUM amount(t, Account a, p);

accountPayslipBatch  = DATA LOCAL Account (PayslipBatch);
nameAccountPayslipBatch 'Со счета' (PayslipBatch b)= name(accountPayslipBatch(b));

amount 'Сумма' (TypePaymentPayslip t, Account a, PayslipBatch b) = GROUP SUM amount(t, a, Payslip p) IF batch(p) = b;

date 'Дата оплаты' = DATA DATE (TypePaymentPayslip, PayslipBatch);

paid 'Paid' (Payslip p) = GROUP SUM amount(TypePaymentPayslip t, Account a, p) IF date(t, batch(p));

left 'Left' (Payslip p) = netWage(p) (-) paid(p);

paid 'Paid' (PayslipBatch b) = GROUP SUM paid(Payslip p) BY batch(p);
left 'Left' (PayslipBatch b) = GROUP SUM left(Payslip p) BY batch(p);


background(Payslip p) = CASE 
    WHEN paid(p) AND NOT left(p) THEN RGB(51, 255, 204)
    WHEN left(p) THEN RGB(255, 204, 204)
;

EXTEND FORM payslipBatches
    PROPERTIES (b) paid, left
;
CONSTRAINT SETCHANGED(accountPayslipBatch(PayslipBatch b)) AND NOT holder(accountPayslipBatch(b)) = company(b)
     CHECKED BY accountPayslipBatch[PayslipBatch] MESSAGE ''
;

EXTEND FORM payslipBatch
    OBJECTS t = TypePaymentPayslip, a = Account
    PROPERTIES amount(t, a, p) COLUMNS (t) HEADER (name(t) + '\n' + toChar(date(t, b), 'dd.MM')) GRID DRAW p SHOWIF accountPayslipBatch(b) 
        ON CHANGE {
            INPUT n = NUMERIC[16,2] DO NEWSESSION {
                amount(t, a, p) <- n;
                APPLY;
            }
        }
    PROPERTIES amount(t, p) COLUMNS (t) HEADER (name(t) + '\n' + toChar(date(t, b), 'dd.MM') + ' (итого)') GRID DRAW p SHOWIF NOT accountPayslipBatch(b)
    PROPERTIES nameAccountPayslipBatch(b) SELECT 'buttonGroup', paid(p) BACKGROUND background(p), left(p)  BACKGROUND background(p)
    FILTERS a = accountPayslipBatch(b), date(t, b)
    
    OBJECTS tc = TypePaymentPayslip
    PROPERTIES name(tc), date(tc, b)
    OBJECTS ac = Account 
    PROPERTIES currentBalance(ac) HEADER name(ac) PANEL
    FILTERS holder(ac) = company(b)
;

DESIGN payslipBatch{
    headerColumns {
        NEW headerColumn2{
            MOVE PROPERTY (currentBalance(ac));
            MOVE PROPERTY(nameAccountPayslipBatch(b)) { alignment = STRETCH; }
        }
    }
    details{
        NEW payments{
            caption = 'Выплаты';
            MOVE BOX (tc);
        }
    }
}

CLASS PaymentsPayslipBatch 'Payment PayslipBatch';

paymentPaysliBatch = AGGR PaymentsPayslipBatch WHERE amount(TypePaymentPayslip type, Account account, PayslipBatch batch) AND date(type, batch);

EXTEND CLASS PaymentsPayslipBatch : Payment;
active(PaymentsPayslipBatch b) += TRUE;

nameType(PaymentsPayslipBatch b) += ISTRING[50]('Выплата ' + name(type(b)));

number(PaymentsPayslipBatch b) += Payroll.number(batch(b));

dateTime(PaymentsPayslipBatch b) += DATETIME(date(type(b), batch(b)));

partner(PaymentsPayslipBatch b) += Payroll.company(batch(b));
company(PaymentsPayslipBatch b) += Payroll.company(batch(b));

companyAccount (PaymentsPayslipBatch b) += account(b);

signedAmount (PaymentsPayslipBatch b) += -NUMERIC[14,2](amount(type(b), account(b), batch(b)));

note (PaymentsPayslipBatch b) += ISTRING[50](CONCAT ' ', 'Выплата сотрудникам', name(type(b)), 'за', name(extractMonth(endDate(batch(b)))), extractYear(endDate(batch(b))));

//

//EXTEND CLASS PayslipBatch : Payment;
//amount = GROUP SUM netWage(Payslip p) BY batch(p);
//active(PayslipBatch b) += TRUE IF left(b) > 0;
//
//nameType(PayslipBatch b) += ISTRING[50]('Платежная ведомость');
////number(PayslipBatch b) += Payroll.number(b);
//
//dateTime(PayslipBatch b) += DATETIME(sum(endDate(b), 10));
//partner(PayslipBatch b) += Payroll.company(b);
//company(PayslipBatch b) += Payroll.company(b);
//
//companyAccount (PayslipBatch b) += defaultBankAccount(company(b));
//
//signedAmount (PayslipBatch b) += -NUMERIC[14,2](left(b));
//
//note (PayslipBatch b) += ISTRING[50](CONCAT ' ', 'оплата труда', 'за', name(extractMonth(endDate(b))), extractYear(endDate(b)));

//остатки с прошлого периода
dateStartCalculateBalance 'Start calculate balance' = DATA DATE ();
prev(Payslip p1, Payslip p2) = startDate(p1) > endDate(p2) AND employee(p1) = employee(p2) AND company(p1) = company(p2) AND p1 != p2 AND startDate(p2) >= dateStartCalculateBalance();

sumUnpaid 'Balance previous periods' (Payslip p1) = GROUP SUM left(Payslip p) IF prev(p1, p);

EXTEND FORM payslipBatch
    PROPERTIES (p) sumUnpaid
;
EXTEND FORM HumanResources.options
    PROPERTIES dateStartCalculateBalance()
;
DESIGN HumanResources.options{
    commons{
        MOVE PROPERTY (dateStartCalculateBalance());
    }
}
MODULE PaymentsDashboardMobile;

REQUIRE CashAccountPayment, OutgoingPaymentIncoming, BillOutgoingPayment, AccountBillProject;

NAMESPACE Invoicing;

vendor = DATA LOCAL NESTED Partner ();
nameVendor 'Partner' = name(vendor());

currency = DATA LOCAL NESTED Currency ();
nameCurrency 'Currency' = name(currency());

dateTime 'Date' = DATA LOCAL NESTED DATETIME ();

netto 'Netto' = DATA LOCAL NESTED NUMERIC[14,2] ();
vat 'Vat' = DATA LOCAL NESTED NUMERIC[14,2] ();
brutto 'Brutto' = netto() (+) vat();

accountObject = DATA LOCAL NESTED AccountObject () NONULL;
nameAccountObject 'Объект затрат' = name(accountObject());
salesAccount = DATA LOCAL NESTED CustomSalesAccount () NONULL;
nameSalesAccount 'Статья затрат' = name(salesAccount());

file 'Файл' = DATA LOCAL NESTED FILE ();

responsibleUserAccount = GROUP MAX Account a IF responsible(a) = currentUser();

attachFile 'Прикрепить файл' () {
    INPUT f = FILE DO {
        file() <- f;
        
        previewPdfFile() <- NULL;
        previewImageFile() <- NULL;

        IF lower(extension(f)) = 'jpg' OR lower(extension(f)) = 'jpeg' OR lower(extension(f)) = 'png' OR lower(extension(f)) = 'bmp' THEN {
            previewImageFile() <- IMAGEFILE(RAWFILE(f));
        }
        IF lower(extension(f)) = 'pdf' THEN {
            previewPdfFile() <- PDFFILE(RAWFILE(f));
        }
        IF lower(extension(f)) = 'doc' OR lower(extension(f)) = 'docx' THEN {
            TRY {
                wordToPdf(RAWFILE(f));
            } CATCH {}
            previewPdfFile() <- exportPdfFile();
        }
    }
}

createPayment 'Создать платёж' () {
    NEWSESSION NESTED {
        NEW b = Bill {
            status(b) <- BillStatus.draft;
            type(b) <- defaultBillTypeCashier();
            company(b) <- holder(responsibleUserAccount());
            vendor(b) <- vendor();
            dateTime(b) <- dateTime();
            
            IF file() THEN {
                NEW bf = BillFile {
                    bill(bf) <- b;
                    file(bf) <- RAWFILE(file());
                    extension(bf) <- extension(file());
                }
            }
            
            NEW l = BillLine {
                bill(l) <- b;
                item(l) <- defaultBillItem();
                taxAmount(defaultTax(), l) <- vat();
                untaxedAmount(l) <- netto();
            }

            NEW bp = BillProject {
                bill(bp) <- b;
                accountObject(bp) <- accountObject();
                salesAccount(bp) <- salesAccount();
                taxAmount(defaultTax(), bp) <- vat();
                untaxedAmount(bp) <- netto();
                base(bp) <- 100;
            }

            NEW p = OutgoingPayment {
                status(p) <- OutgoingPaymentStatus.draft;
                companyAccount(p) <- responsibleUserAccount();
                company(p) <- holder(responsibleUserAccount());
                partner(p) <- vendor();
                type(p) <- defaultOutgoingPaymentTypeCashier();
                netto(p) <- netto();
                vat(p) <- vat();

                IF file() THEN {
                    NEW uof = OutgoingPaymentFile {
                        outgoingPayment(uof) <- p;
                        file(uof) <- RAWFILE(file());
                        extension(uof) <- extension(file());
                    }
                }
            }
        }
        APPLY;
    }
}

FORM createOutgoingPayment 'Исходящий платёж'
    OBJECTS a = Account PANEL
    PROPERTIES () dateTime, nameVendor, netto, vat, brutto READONLY, nameAccountObject, nameSalesAccount
    PROPERTIES () PANEL attachFile
    PROPERTIES () TOOLBAR createPayment AFTER formCancel()

    PROPERTIES() READONLY previewPdfFile SHOWIF previewPdfFile(), previewImageFile SHOWIF NOT previewPdfFile()

    EVENTS ON INIT {
        dateTime() <- currentDateTime();
    }

    EVENTS ON CANCEL {
        dateTime() <- currentDateTime();
        vendor() <- NULL;
        netto() <- NULL;
        vat() <- NULL;
        accountObject() <- NULL;
        salesAccount() <- NULL;
        file() <- NULL;
        previewPdfFile() <- NULL;
        previewImageFile() <- NULL;
    }
;

DESIGN createOutgoingPayment {
    OBJECTS {
        NEW info {
            fill = 10;
            MOVE PROPERTY (dateTime()) { charWidth = 20; fontSize = 18; font = '18'; captionFont = '18'; }
            MOVE PROPERTY (nameVendor()) { charWidth = 20; fontSize = 18; captionFont = '18'; }
            MOVE PROPERTY (netto()) { charWidth = 20; fontSize = 18; captionFont = '18'; }
            MOVE PROPERTY (vat()) { charWidth = 20; fontSize = 18; captionFont = '18'; }
            MOVE PROPERTY (brutto()) { charWidth = 20; fontSize = 18; captionFont = '18'; }
            MOVE PROPERTY (nameAccountObject()) { charWidth = 20; fontSize = 18; captionFont = '18'; }
            MOVE PROPERTY (nameSalesAccount()) { charWidth = 20; fontSize = 18; captionFont = '18'; }
            NEW action {
                alignment = STRETCH;
                MOVE PROPERTY (attachFile()) { height = 25; fill = 1; alignment = STRETCH; fontSize = 18; captionFont = '18'; }
            }
        }
        NEW files {
            horizontal = TRUE;
            fill = 5;
            MOVE PROPERTY(previewPdfFile()) { fill = 1; size = (370, 270); caption = ''; alignment = STRETCH; }
            MOVE PROPERTY(previewImageFile()) { fill = 1; size = (370, 270); caption = ''; alignment = STRETCH; }
        }

        REMOVE PROPERTY(formApply());
        REMOVE PROPERTY(formRefresh());
        REMOVE PROPERTY(formOk());
    }
    NEW actions {
        horizontal = TRUE;
        alignment = STRETCH;
        MOVE PROPERTY (formClose()){ height = 25; alignment = STRETCH; fill = 1; fontSize = 18; }
        MOVE PROPERTY (formCancel()){ height = 25; alignment = STRETCH; fill = 1; fontSize = 18; }
        MOVE PROPERTY (createPayment()) { height = 25; alignment = STRETCH; fill = 1; fontSize = 18; }
    }
    REMOVE TOOLBARLEFT;
}

createOutgoingPayment 'Создать исходящий платёж' (Account a) {
    NEWSESSION {
        NEW p = OutgoingPayment {
            SHOW createOutgoingPayment DOCKED;
        }
    }
}

htmlPayment '' (Payment p) = HTML ('<div>' + (CONCAT '&nbsp;',
    '<font size="-1">' + number(p) + '</font>',
    '<i>' + nameType(p) + '</i>',
    toChar(DATE(dateTime(p)), 'dd.mm.yyyy'),
    toChar(TIME(dateTime(p)), 'hh24:mi'),
    '<b>' + signedAmount(p) + '</b>',
    '<i>' + namePartner(p) + '</i>',
    '<u>' + namePartnerAccount(p) + '</u>') + '</div>');

htmlName (Account a) = HTML ('<div>' + (CONCAT '&nbsp;',
    'Касса: ',
    '<b>' + name(a) + '</b>'
) + '</div>');

htmlBalance (Account a) = HTML ('<div>' + (CONCAT '&nbsp;',
    'Баланс: ',
    '<b>' + balance(a) + '</b>'
    ) + '</div>');


FORM mobilePayments 'Платежи (мобильные)'
    OBJECTS a = Account
    PROPERTIES (a) READONLY PANEL htmlName, htmlBalance
    FILTERS responsible(a) = currentUser()

    OBJECTS pa = Payment
    PROPERTIES(pa) READONLY htmlPayment

    FILTERS companyAccount(pa) = a AND pa IS OutgoingPayment

    PROPERTIES(a) PANEL createOutgoingPayment
;

DESIGN mobilePayments {
    OBJECTS {
        fill = 1;
        NEW info {
            fill = 1;
            horizontal = TRUE;
            MOVE PROPERTY(htmlName(a)) {
                caption = '';
                alignment = STRETCH;
                focusable = FALSE;
            }
            MOVE PROPERTY(htmlBalance(a)) {
                caption = '';
                alignment = STRETCH;
                focusable = FALSE;
            }
        }
        NEW payments {
            fill = 100;
            MOVE GRID(pa) {
                PROPERTY(htmlPayment(pa)) { valueClass = 'myclass'; }
            }
        }
        NEW actions {
            fill = 1;
            horizontal = TRUE;
            MOVE PROPERTY(createOutgoingPayment(a)) { fill = 1; alignment = STRETCH; height = 30; }
        }
    }
    REMOVE TOOLBARSYSTEM(pa);
    REMOVE TOOLBARLEFT;
}

NAVIGATOR {
    reporting {
        NEW mobilePayments AFTER payments;
    }
}
MODULE MetaCompanySeparation;

REQUIRE EmployeeCustom, Company, Project, InvLedgerItem, ResLedgerItem, BillItem, InvoiceItem, Mailing, InvLedgerLot, Receipt, Shipment, Scrap, Adjustment,
        AdjustmentCreate, TransferMobile, InventoryReport, InventoryValuation, ProductMoves, LocationProduct, AccountDistribution, IncomingPayment,
        OutgoingPayment, BillPaymentDashboard, PaymentProjectDashboard, PaymentListDashboard, BillReport, InvoiceReport, Payment, ProjectCustom,
        ProjectTimeEntry, ProjectTask, TimesheetSupervisorCustom, TimesheetSupervisorMobile, ProjectLedgerReport, TimesheetSupervisorLunch,
        TimesheetSupervisorAccomodation, TimesheetSupervisorTotal, TimesheetSupervisorPayslip, LunchOrder, PaymentsDashboardCustom, ProjectFilter,
        ReceiptFilter, AccountBillProject
;

NAMESPACE MasterData;

access (CustomUser u, Company c) = IF showAllCompaniesData(u) THEN TRUE ELSE in(u, c);

//фильтрация форм
META setCompanySeparation (form, obj, prop)
    EXTEND FORM form
        FILTERS access(currentUser(), prop(obj)) OR NOT prop(obj)
    ;
END

META setCompanySeparationDiffProps (form, obj, propOuter, propInner)
    EXTEND FORM form
        FILTERS access(currentUser(), propOuter(propInner(obj))) OR NOT propInner(obj)
    ;
END

META setCompanySeparationDiffPropsDiff (form, obj, propOuter, prop1, prop2)
    EXTEND FORM form
        FILTERS (access(currentUser(), propOuter(prop1(obj))) AND access(currentUser(), propOuter(prop2(obj))))
            OR (access(currentUser(), propOuter(prop1(obj))) AND NOT propOuter(prop2(obj)))
            OR (access(currentUser(), propOuter(prop2(obj))) AND NOT propOuter(prop1(obj)))
    ;
END

//сотрудники
@setCompanySeparation(employeesCustom, e, legalEntity);

//номенклатура
//1. склад
@setCompanySeparation(item, l, company);

//2. движения
@setCompanySeparationDiffPropsDiff(item, inv, company, toLocation, fromLocation);

//3. резервирование
@setCompanySeparationDiffProps(item, res, company, location);

DESIGN item {
    operations {
        REMOVE BOX(bl);
    }
}

//реализации
@setCompanySeparationDiffProps(item, il, company, invoice);

//приёмки
@setCompanySeparationDiffProps(receipts, r, company, location);

//отгрузки
@setCompanySeparationDiffPropsDiff(shipments, s, company, toLocation, location);

//списания
@setCompanySeparationDiffProps(scraps, s, company, location);

//инвентаризации
@setCompanySeparationDiffProps(adjustments, a, company, location);

@setCompanySeparation(adjustments, l, company);

//мобильное перемещение
@setCompanySeparation(transferMobile, l, company);

//текущие остатки
@setCompanySeparation(inventoryReport, l, company);

@setCompanySeparationDiffPropsDiff(inventoryReport, il, company, toLocation, fromLocation);

//себестоимость остатков
@setCompanySeparation(inventoryValuation, l, company);

//движение товара
@setCompanySeparationDiffPropsDiff(productMoves, il, company, toLocation, fromLocation);

//места хранения
@setCompanySeparation(locations, l, company);

@setCompanySeparation(locations, lt, company);

//размещение товаров
@setCompanySeparation(locationProduct, l, company);

//распределения затрат
@setCompanySeparation(accountDistributions, a, company);

//реестр фактур
@setCompanySeparation(bills, b, company);

//реализации
@setCompanySeparation(invoices, i, company);

//входящие платежи
@setCompanySeparation(incomingPayments, p, company);

//исходящие платежи
@setCompanySeparation(outgoingPayments, p, company);

//фактуры
@setCompanySeparation(billPaymentDashboard, b, company);

//к оплате
@setCompanySeparation(paymentListDashboard, o, company);

//отчёт по фактурам
@setCompanySeparation(billReport, i, company);

//отчёт по реализациям
@setCompanySeparation(invoiceReport, i, company);

//платежи
@setCompanySeparation(payments, p, company);

@setCompanySeparation(payments, a, holder);

//платёжный календарь
@setCompanySeparation(paymentCalendar, ac, holder);

@setCompanySeparation(paymentCalendar, a, holder);

//проекты
@setCompanySeparation(projects, p, company);

DESIGN projects {
    filters {
        REMOVE PROPERTY(nameProjectCompany());
    }
}

//отметки времени
@setCompanySeparationDiffProps(timeEntries, t, company, project);

//задачи
@setCompanySeparationDiffProps(tasks, t, legalEntity, assignedTo);

////табель менеджера
@setCompanySeparation(timesheetSupervisor, p, company);

//обеды
@setCompanySeparation(timesheetSupervisor, pl, company);

//размещение
@setCompanySeparation(timesheetSupervisor, pa, company);

//расчётный лист 
@setCompanySeparation(timesheetSupervisor, ps, company);

//итого
@setCompanySeparation(timesheetSupervisor, tp, company);

//табель менеджера мобильный
@setCompanySeparationDiffProps(timesheetSupervisorMobile, , company, timesheetProject);

//отчёт по проекту
//@setCompanySeparationDiffProps(projectLedgerReport, l, company, project){
//    EXTEND FORM projectLedgerReport
//        FILTERS access(currentUser(), company(project(l)))
//    ;
//};

//Заказы обедов
@setCompanySeparationDiffProps(Lunch.orders, o, company, project);

//расчётные листы
@setCompanySeparation(payslips, p, company);

//платёжные ведомости
@setCompanySeparation(payslipBatches, b, company);

//размещения
@setCompanySeparationDiffProps(Accomodation.orders, o, company, project);

@setCompanySeparation(locations, l, company);

//фильтрация полей
META companyConstraint(prop, class, obj)
    CONSTRAINT prop(class obj) AND NOT access(currentUser(), prop(obj))
        CHECKED BY prop[class] MESSAGE '';
END

META projectConstraint(prop, class, obj)
    CONSTRAINT prop(class obj) AND NOT access(currentUser(), company(prop(obj)))
        CHECKED BY prop[class] MESSAGE '';
END

@companyConstraint(projectPartner, ,);

//отметка времени
@projectConstraint(project, TimeEntry, t);

@companyConstraint(company, Project, proj);

//приёмка
@projectConstraint(location, Receipt, r);

@projectConstraint(receiptLocation, ,);

//отгрузка
@projectConstraint(location, Shipment, s);

@projectConstraint(toLocation, Shipment, s);

//списание
@projectConstraint(location, Scrap, s);

//инвентаризация
@projectConstraint(location, Adjustment, a);

@projectConstraint(adjustmentLocation, ,);

//распределение затрат
@companyConstraint(company, AccountDistribution, a);

@projectConstraint(project, AccountDistributionLine, adl);

//фактура
@companyConstraint(company, Bill, b);

@companyConstraint(billPaymentDashboardCompany, ,);

//реализация
@companyConstraint(company, Invoice, i);

@projectConstraint(project, Invoice, i);

//исходящий платёж
@companyConstraint(company, OutgoingPayment, i);

//входящий платёж
@companyConstraint(company, IncomingPayment, i);

//задача
@projectConstraint(project, Task, t);

@projectConstraint(taskProject, ,);

//проект
@companyConstraint(company, Project, p);

//расчётный лист
@companyConstraint(company, Payslip, p);

//платёжная ведомость
@companyConstraint(company, PayslipBatch, p);

//к оплате
@companyConstraint(paymentListDashboardCompany, ,);

//место хранения
@companyConstraint(company, Location, l);

//табель менеджера - расчётный лист
@companyConstraint(timesheetCompany, ,);

META accountObjectConstraint(class, obj)
    CONSTRAINT accountObject(class obj) AND NOT access(currentUser(), company[Project](accountObject(obj))) AND NOT access(currentUser(), company[ExtraAccountObject](accountObject(obj)))
        CHECKED BY accountObject[class] MESSAGE '';
END

//списание
@accountObjectConstraint(ScrapProject, sp);

//распределение затрат
@accountObjectConstraint(AccountDistribution, ad);

//фактура
@accountObjectConstraint(BillProject, bp);

//контрагенты
EXTEND FORM partners
    FILTERS (access(currentUser(), p) AND p IS Company) OR NOT p IS Company
    FILTERS access(currentUser(), legalEntity(p)) AND permit(currentUser(), navigatorElementCanonicalName('MasterData.employeesCustom')) OR NOT p IS Employee
;

@setCompanySeparation(ProjectManagement.dialogEmployees, e, legalEntity);

@setCompanySeparation(Invoicing.options, ao, Bill.company);

//ограничение к выбору доп. объекта затрат
META checkExtraAccountObject(class, param1, param2)
    CONSTRAINT accountObject(class obj) AND company[ExtraAccountObject](accountObject(obj)) != company(param1(param2(obj)))
        CHECKED BY accountObject[class] MESSAGE '';
END

@checkExtraAccountObject(AccountDistribution, , );

@checkExtraAccountObject(BillProject, , );

@checkExtraAccountObject(ScrapProject, location, scrap);

//счета
@setCompanySeparation(Invoicing.accounts, a, holder);
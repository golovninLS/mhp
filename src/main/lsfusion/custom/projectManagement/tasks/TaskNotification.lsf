MODULE TaskNotification;

REQUIRE EmailNotification, TelegramNotification, TaskCustom;

NAMESPACE ProjectManagement;

messageNotification(Task t) =
    replace(replace(replace(replace(replace(replace(replace(template(NotificationType.task), '[name]', OVERRIDE name(t), ''),
        '[nameProject]', OVERRIDE nameProject(t), '-'),
        '[nameAuthor]', OVERRIDE nameAuthor(t), '-'),
        '[nameAssignedTo]', OVERRIDE nameAssignedTo(t), '-'),
        '[nameStatus]', OVERRIDE nameStatus(t), '-'),
        '[namePriority]', OVERRIDE namePriority(t), '-'),
        '[deadline]', OVERRIDE STRING(deadline(t)), '-');

WHEN (SETCHANGED(Task t IS Task) OR SETCHANGED(assignedTo(t))) AND chat(assignedTo(t)) AND in(chat(assignedTo(t)), NotificationType.task) DO {
    sendMessage(chat(assignedTo(t)), messageNotification(t));
}

statusNotReady (Task t) = TRUE IF (status(t) != taskStatus('done') AND status(t) != taskStatus('closed'));
nameTaskProject (Task t) = CONCAT ' ‚Äî ', '‚Ä¢ ' + name(t), (OVERRIDE nameProject(t), '–ø—Ä–æ–µ–∫—Ç –Ω–µ —É–∫–∞–∑–∞–Ω');
deadlineToChar (Task t) = toChar(deadline(t), 'dd.mm.yyyy');

//–Ω–∞–∑–Ω–∞—á–µ–Ω—ã –º–Ω–µ
overdueTasks (Employee e) = 'üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ:\n' + (GROUP CONCAT (nameTaskProject(Task t) + ' ‚Äî ' + deadlineToChar(t))
    IF assignedTo(t) = e AND deadline(t) < currentDate() AND statusNotReady(t), '\n' ORDER t);
deadlineTodayTasks (Employee e) = '‚ö†Ô∏è –î–µ–¥–ª–∞–π–Ω —Å–µ–≥–æ–¥–Ω—è:\n' + (GROUP CONCAT nameTaskProject(Task t)
    IF assignedTo(t) = e AND deadline(t) = currentDate() AND statusNotReady(t), '\n' ORDER t);
assignedForMe (Employee e) = '–ù–∞–∑–Ω–∞—á–µ–Ω—ã –º–Ω–µ:\n' + CONCAT '\n', overdueTasks(e), deadlineTodayTasks(e);

//–º–æ–∏ –∑–∞–¥–∞—á–∏
overdueTasksMine (Employee e) = 'üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ:\n' + (GROUP CONCAT (CONCAT ' ‚Äî ', nameTaskProject (Task t), '–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å', nameAssignedTo(t), deadlineToChar(t))
    IF author(t) = e AND deadline(t) < currentDate() AND statusNotReady(t), '\n' ORDER t);
deadlineTodayTasksMine (Employee e) = '‚ö†Ô∏è –î–µ–¥–ª–∞–π–Ω —Å–µ–≥–æ–¥–Ω—è:\n' + (GROUP CONCAT (CONCAT ' ‚Äî ', nameTaskProject (Task t), '–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å', nameAssignedTo(t))
    IF author(t) = e AND deadline(t) = currentDate() AND statusNotReady(t), '\n' ORDER t);
createdByMe (Employee e) = '–ú–æ–∏ –∑–∞–¥–∞—á–∏:\n' + CONCAT '\n', overdueTasksMine(e), deadlineTodayTasksMine(e);

//–∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞
overdueTasksProject (Employee e) = 'üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ:\n' + (GROUP CONCAT (CONCAT ' ‚Äî ', nameTaskProject (Task t), deadlineToChar(t))
    IF in(project(t), e) AND NOT assignedTo(t) AND deadline(t) < currentDate() AND statusNotReady(t), '\n' ORDER t);
deadlineTodayTasksProject (Employee e) = '‚ö†Ô∏è –î–µ–¥–ª–∞–π–Ω —Å–µ–≥–æ–¥–Ω—è:\n' + (GROUP CONCAT (CONCAT ' ‚Äî ', nameTaskProject (Task t), deadlineToChar(t))
    IF in(project(t), e) AND NOT assignedTo(t) AND deadline(t) = currentDate() AND statusNotReady(t), '\n' ORDER t);
projectTasks (Employee e) = '–ó–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞:\n' + CONCAT '\n', overdueTasksProject(e), deadlineTodayTasksProject(e);

tasksReportMessage (Chat c) = CONCAT '\n\n', assignedForMe(employee(c)), createdByMe(employee(c)), projectTasks(employee(c));
tasksReportMessageEmail(Chat c) = replace(tasksReportMessage(c), '\n', '<br>');

sendTaskNotificationsTelegram () {
    timeoutHttp() <- 20000;
    FOR Chat c IS Chat AND employee(c) DO TRY {
        sendMessage(c, tasksReportMessage(c));
    } CATCH {
        MESSAGE '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è ' + nameEmployee(c);
        MESSAGE System.messageCaughtException();
    }
}

sendTaskNotificationsEmail () {
    timeoutHttp() <- 20000;
    FOR Employee e IS Employee AND email[Partner](e) DO TRY {
        stringToFile(tasksReportMessageEmail(chat(e)));
        EMAIL
            SUBJECT ('–û—Ç—á—ë—Ç –ø–æ –∑–∞–¥–∞—á–∞–º')
            TO email[Partner](e)
            BODY resultFile();
        MESSAGE '–û—Ç—á—ë—Ç –ø–æ –∑–∞–¥–∞—á–∞–º –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω' NOWAIT;
    } CATCH {
        MESSAGE '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è ' + name(e);
        MESSAGE System.messageCaughtException();
    }
}

sendMessageAboutAssignedTask (Employee e, STRING s) {
    timeoutHttp() <- 20000;
    IF email[Partner](e) THEN TRY {
        stringToFile(s);
        EMAIL
            SUBJECT ('–ù–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞')
            TO email[Partner](e)
            BODY resultFile();
        MESSAGE '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' NOWAIT;
    } CATCH {
        MESSAGE '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è ' + name(e);
        MESSAGE System.messageCaughtException();
    }
}

WHEN (SETCHANGED(Task t IS Task) OR SETCHANGED(assignedTo(t))) AND in(assignedTo(t), NotificationType.task) DO {
    sendMessageAboutAssignedTask(assignedTo(t), messageNotification(t));
}
MODULE TaskCustom;

REQUIRE TaskKanban, ProjectCustom;

NAMESPACE ProjectManagement;

defaultTaskStatus = DATA TaskStatus ();
nameDefaultStatus 'Статус по умолчанию' = name(defaultTaskStatus());

EXTEND FORM options PROPERTIES nameDefaultStatus();
DESIGN options {
    tabbedPane {
        NEW statuses {
            fill = 1;
            alignment = STRETCH;
            caption = 'Task statuses';
            MOVE PROPERTY (nameDefaultStatus());
            MOVE BOX(ts);
        }
    }
}

showAllTasks 'Показывать все задачи' = DATA BOOLEAN (CustomUser);

EXTEND FORM tasks
    EXTEND FILTERGROUP my
        FILTER 'My tasks + Assigned to me' author(t) = currentUser() OR assignedTo(t) = currentUser() 'F7' DEFAULT 
    FILTERS (author(t) = currentUser() OR assignedTo(t) = currentUser()) OR showAllTasks(currentUser())
    FILTERS (author(tt) = currentUser() OR assignedTo(tt) = currentUser()) OR showAllTasks(currentUser())
;

EXTEND FORM customUsers
    PROPERTIES showAllTasks(u)
;

datePlannedTask 'Дата создания задачи по планируемой выручке' = DATA INTEGER ();
deadlinePlannedTask 'Дедлайн + дней(планируемая выручка)' = DATA INTEGER ();

dateClosedTask 'Дата создания задачи по закрытию месяца' = DATA INTEGER ();
deadlineClosedTask 'Дедлайн + дней(закрытие месяца)' = DATA INTEGER ();

createPeriodTasks 'Создать периодические задачи' ABSTRACT LIST ();

createPeriodTasks() + {
    IF datePlannedTask() = extractDay(currentDate()) THEN {
        FOR Employee e = manager(Project p) AND (endDate(p) >= firstDayOfMonth(currentDate()) OR NOT endDate(p)) AND NOT
            planned(p, interval(firstDayOfMonth(currentDate()), lastDayOfMonth(currentDate())))
            DO NEWSESSION NEW t = Task{
            status(t) <- defaultTaskStatus();
            assignedTo(t) <- e;
            name(t) <- '[' + name(p) + '] Заполнение плановой выручки на ' + lower(name(extractMonth(currentDate())));
            deadline(t) <- sum(currentDate(), OVERRIDE deadlinePlannedTask(), 2);
            APPLY;
        }
    }
    IF dateClosedTask() = extractDay(currentDate()) THEN {
        FOR Employee e = manager(Project p) AND (endDate(p) >= sum(firstDayOfMonth(currentDate()), -1) OR NOT endDate(p)) DO NEWSESSION NEW t = Task {
            status(t) <- defaultTaskStatus();
            assignedTo(t) <- e;
            name(t) <- '[' + name(p) + '] Закрытие табеля за ' + lower(name(extractMonth(sum(firstDayOfMonth(currentDate()), -1))));
            deadline(t) <- sum(currentDate(), OVERRIDE deadlineClosedTask(), 2);
            APPLY;
        }
    }
}

EXTEND FORM options
    PROPERTIES () datePlannedTask, deadlinePlannedTask, dateClosedTask, deadlineClosedTask, createPeriodTasks
;

DESIGN options{
    tabbedPane{
        NEW periodTasks{
            caption = 'Периодические задачи';
            MOVE PROPERTY (datePlannedTask());
            MOVE PROPERTY (deadlinePlannedTask());
            MOVE PROPERTY (dateClosedTask());
            MOVE PROPERTY (deadlineClosedTask());
            MOVE PROPERTY (createPeriodTasks());
        }
    }
}

WHEN SET(Task t IS Task) AND NOT status(t) DO {
    status(t) <- defaultTaskStatus();
}

CLASS CheckList 'Checklist';

task = DATA Task (CheckList);
name 'Name' = DATA STRING (CheckList) NONULL;
progressBar 'Progress' = ABSTRACT INTEGER (CheckList);

CLASS CheckListLine 'Checklist line';

checklist = DATA CheckList (CheckListLine);
description 'Description' = DATA STRING (CheckListLine);
deadline 'Deadline' = DATA DATE (CheckListLine);
responsible = DATA Employee (CheckListLine);
nameResponsible 'Responsible' (CheckListLine l) = name[Partner](responsible(l));
done 'Done' = DATA BOOLEAN (CheckListLine);

order '№' = DATA INTEGER (CheckListLine);
WHEN LOCAL SETCHANGED(CheckListLine t IS CheckListLine) AND CheckList ct = checklist(t) AND NOT order(t) DO
    order(t) <- [GROUP MAX order(CheckListLine tt) BY checklist(tt)](ct) (+) 1;

amountLines (CheckList c) = GROUP SUM 1 IF checklist(CheckListLine cl) = c;
amountDone (CheckList c) = GROUP SUM 1 IF checklist(CheckListLine cl) = c AND done(cl);
progressBar (CheckList c) += round0((amountDone(c) * 100) / amountLines(c));

taskChecklists () = JSON FROM id = CheckList c, progressBar(c) WHERE c IS CheckList;

EXTEND FORM task
    OBJECTS c = CheckList
    PROPERTIES(c) name READONLYIF currentUser() != author(t) AND NOT showAllTasks(currentUser()) BACKGROUND RGB(163, 204, 164) IF progressBar(c) = 100
    PROPERTIES(c) SHOWIF currentUser() = author(t) OR showAllTasks(currentUser()) NEW, DELETE
    LIST CheckList OBJECT c
    FILTERS task(c) = t

    OBJECTS cl = CheckListLine
    PROPERTIES(cl) READONLYIF currentUser() != author(t) AND NOT showAllTasks(currentUser()) order READONLY, description, deadline, nameResponsible, done
    PROPERTIES(cl) SHOWIF (currentUser() = author(t) OR showAllTasks(currentUser())) AND c NEW, DELETE
    PROPERTIES(c) progressBar READONLY CUSTOM 'addProgressBar' DRAW cl PANEL
    ORDERS order(cl)
    FILTERS checklist(cl) = c
;

DESIGN task {
    details {
        NEW checklist {
            caption = 'Checklist';
            fill = 1;
            horizontal = TRUE;
            NEW headerL {
                fill = 1;
                MOVE BOX (c) { caption = ''; };
                PROPERTY (name(c)) { charWidth = 15; }
            }
            NEW bodyL {
                fill = 20;
                alignment = STRETCH;
                NEW box {
                    fill = 100;
                    MOVE BOX(cl) { caption = ''; };
                    PROPERTY (order(cl)) { charWidth = 3; }
                    PROPERTY (description(cl)) { charWidth = 40; }
                    PROPERTY (deadline(cl)) { charWidth = 15; }
                    PROPERTY (nameResponsible(cl)) { charWidth = 10; }
                    PROPERTY (done(cl)) { charWidth = 12; }
                }
                MOVE PROPERTY (progressBar(c)) { fill = 1; };
                MOVE TOOLBARBOX(cl);
            }
        }
    }
}

WHEN LOCAL FORMS task SETCHANGED(deadline(CheckListLine cl)) AND (deadline(cl) > deadline(task(checklist(cl))) OR NOT deadline(task(checklist(cl)))) DO
    deadline(task(checklist(cl))) <- deadline(cl);

CONSTRAINT CHANGED(author(Task t)) AND PREV(author(t)) != currentUser() AND NOT showAllTasks(currentUser())
    MESSAGE 'Только автор задачи может назначить другого автора.';

onWebClientInit() + {
    onWebClientInit('checklist.js') <- 1;
    onWebClientInit('checklist.css') <- 2;
}

startDate 'Дата начала' = ABSTRACT DATE (Task);

EXTEND FORM task PROPERTIES(t) startDate;
EXTEND FORM tasks PROPERTIES(t) startDate BEFORE deadline(t);

DESIGN task {
    params {
        MOVE PROPERTY(startDate(t)) BEFORE PROPERTY (deadline(t));
    }
}
MODULE TimesheetSupervisorAccomodation;

REQUIRE TimesheetSupervisor, TimesheetAccomodation, AccomodationOrder, ProjectAccomodation;

PRIORITY MasterData;

NAMESPACE ProjectManagement;

CONSTRAINT timesheetAccomodation() AND timesheetProject() AND NOT in(timesheetProject(), timesheetAccomodation())
    CHECKED BY timesheetAccomodation[] MESSAGE '';

symbolAccomodationOrder 'Symbol' (DATE d, Employee e) = symbol(accomodation(order(d, e)));

symbolAccomodation 'Symbol' (Order o) = symbol(accomodation(o));
nameAccomodation '{master.data.name}' (Order o) = name(accomodation(o));

FORM timesheetSupervisorDateEmployeeAccomodationOrders 'Accomodations'
    OBJECTS i = INTERVAL[DATE] PANEL
    OBJECTS e = Employee PANEL

    OBJECTS o = Order
    PROPERTIES(o) READONLY startDate, endDate, symbolAccomodation, nameAccomodation
    PROPERTIES(o) EDIT, DELETE
    ORDERS startDate(o)
    FILTERS
        startDate(o) < from(i) AND endDate(o) >= from(i) OR startDate(o) >= from(i) AND startDate(o) <= to(i) AND endDate(o) >= from(i),
        employee(o) = e
;

EXTEND FORM timesheetSupervisor
    PROPERTIES nameTimesheetAccomodation()

    OBJECTS ea = Employee
    PROPERTIES(ea) READONLY firstName, lastName, namePosition, rolesTimesheet

    PROPERTIES symbolAccomodationOrder(d, ea) WAIT COLUMNS (d) HEADER extractDay(d) BACKGROUND backgroundHoursTimesheet(d, ea)
                ON CHANGE {
                    IF timesheetAccomodation() THEN {
                        NEWSESSION {
                            IF order(d, ea) THEN
                                endDate(order(d, ea)) <- d;
                            ELSE NEW o = Order {
                                startDate(o) <- d;
                                employee(o) <- ea;
                                accomodation(o) <- timesheetAccomodation();
                            }
                            APPLY;
                        }
                    } ELSE
                        SHOW timesheetSupervisorDateEmployeeAccomodationOrders OBJECTS i = interval(d, d), e = ea FLOAT;
                } ON CONTEXTMENU checkIn(d, ea) ON CONTEXTMENU checkOut(d, ea) ON CONTEXTMENU delete(d, ea)
    FILTERS assigned(timesheetProject(), ea, dates) OR hours(ea, timesheetProject(), dates) OR (NOT countAssignments(timesheetProject()) AND NOT countAssignments(currentUser()))

    FILTERGROUP onlyFilledAccomodation
        FILTER 'Только заполненные' countAccomodation(ea, dates)
;

DESIGN timesheetSupervisor {
    tabbedPane {
        NEW accomodation {
            caption = 'Accomodation order';
            MOVE PROPERTY(nameTimesheetAccomodation()) { alignment = START; }
            MOVE BOX(ea) {
                caption = '';
                PROPERTY(symbolAccomodationOrder(d, ea)) {
                    charWidth = 2;
                    //                valueTooltip = timeEntries(d, e);
                }
            }
        }
    }
}

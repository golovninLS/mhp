MODULE TimesheetSupervisorTotal;

REQUIRE TimesheetSupervisor, TimesheetSalary, 
        ProjectSalary, LunchOrder, AccomodationOrder, LunchCompensation;

PRIORITY MasterData;

NAMESPACE ProjectManagement;

toPay 'To pay' (Employee e, INTERVAL[DATE] i) = salary(e, i) (-) lunches(e, i) (-) accomodation(e, i) (+) lunchCompensation(e, i); 

timesheetHoursProject 'Hours (project)' (Employee e, INTERVAL[DATE] i) = hours(e, timesheetProject(), i);
timesheetSalaryProject 'Salary (project)' (Employee e, INTERVAL[DATE] i) = salary(e, timesheetProject(), i);

rateSalary 'Salary per hour (project)' (Employee e, INTERVAL[DATE] i) = rateSalary(timesheetProject(), e, from(i));

changeRateSalary (Employee e, INTERVAL[DATE] i) {
    INPUT q = NUMERIC[10,2] DO
        IF salary(timesheetProject(), e, from(i)) AND NOT q THEN {
            delete(salary(timesheetProject(), e, from(i)));
        } ELSE IF salary(timesheetProject(), e, from(i)) THEN {
        rate(salary(timesheetProject(), e, from(i))) <- q;
        } ELSE NEW p = ProjectSalary {
            project(p) <- timesheetProject();
            date(p) <- from(i);
            employee(p) <- e;
            rate(p) <- q;
        }
}

EXTEND FORM timesheetSupervisor
    OBJECTS et = Employee
    PROPERTIES(et) READONLY firstName, lastName, namePosition, rolesTimesheet
    
    PROPERTIES timesheetHoursProject(et, dates) SHOWIF timesheetProject(), rateSalary(et, dates) SHOWIF timesheetProject() ON CHANGE changeRateSalary(et, dates),
               hours(et, dates), countLunches(et, dates), countAccomodation(et, dates),
               timesheetSalaryProject(et, dates) SHOWIF timesheetProject() ON CHANGE {
                   SHOW timesheetSupervisorDateEmployee OBJECTS i = dates, e = et FLOAT;
               }, salary(et, dates) ON CHANGE {
                   SHOW timesheetSupervisorDateEmployee OBJECTS i = dates, e = et FLOAT;
               }, lunches(et, dates) ON CHANGE {
                   SHOW Lunch.ordersDateEmployee OBJECTS i = dates, e = et FLOAT;
               }, accomodation(et, dates) ON CHANGE {
                    SHOW Accomodation.ordersDateEmployee OBJECTS i = dates, e = et FLOAT;
               }, lunchCompensation(et, dates), toPay(et, dates)

    FILTERS [FILTER timesheetSupervisor.e](et)
;

DESIGN timesheetSupervisor {
    tabbedPane {
        NEW total {
            caption = 'Total';
            MOVE BOX(et) {
                caption = '';
            }
        }
    }
}

openTimeSheetSupervisor 'Открыть табель' (Project p) {
    NESTEDSESSION {
        timesheetProject() <- p;
        SHOW timesheetSupervisor DOCKED;
    }
}

EXTEND FORM project PROPERTIES openTimeSheetSupervisor(p);

DESIGN project {
    headerRight {
        MOVE PROPERTY(openTimeSheetSupervisor(p));
    }
}
MODULE TimesheetSupervisorCustom;

REQUIRE TimesheetSupervisor, TimeEntryTypeCustom, ProjectCustom;

PRIORITY MasterData;

NAMESPACE ProjectManagement;

clearTimeEntry 'Очистить для сотрудника' (Project p, Employee e, INTERVAL[DATE] dates) {
    ASK 'This action cannot be undone. Continue ?' DO {
        NEWSESSION {
            DELETE TimeEntry te WHERE project(te) == p AND employee(te) == e AND iterate(date(te), from(dates), to(dates));
            APPLY;
        }
    }
} CONFIRM;

changeTimesheetHours (DATE d, Employee e, Project p, TimeEntryType et, NUMERIC[8,2] n, TimeEntryHours h) {
    IF n THEN {
        IF p THEN {
            FOR TimeEntry t = timeEntry(d, e, p, et) DO {
                IF hours(t) = n AND h THEN
                    DELETE t;
                ELSE {
                    hours(t) <- n;
                    timeEntryHours(t) <- h;
                }
            } ELSE {
                DELETE TimeEntry te WHERE project(te) = p AND employee(te) = e AND date(te) = d;
                NEW t = TimeEntry {
                    project(t) <- p;
                    type(t) <- et;
                    employee(t) <- e;
                    date(t) <- d;
                    hours(t) <- n;
                    timeEntryHours(t) <- h;
                }
            }
        }
    } ELSE
        DELETE TimeEntry t WHERE project(t) = p AND employee(t) = e AND date(t) = d;
}

changeSaveTimesheetHours (DATE d, Employee e, Project p, TimeEntryType et, NUMERIC[8,2] n, TimeEntryHours h, BOOLEAN autoSave) {
    IF NOT autoSave THEN {
        changeTimesheetHours(d, e, p, et, n, h);
    } ELSE
        NEWSESSION APPLY {
            changeTimesheetHours(d, e, p, et, n, h);
        }
}

countTimeEntryProject (DATE d, Project p) = GROUP SUM 1 IF date(TimeEntry t) = d AND project(t) = p;

clear 'Clear' (DATE d, Project p) {
    DELETE TimeEntry t WHERE date(t) = d AND project(t) = p;
}

maxDate (DATE to, Project p) = GROUP MAX date(TimeEntry t) IF date(t) < to AND project(t) = p;
copy 'Copy' (DATE d, Project p) {
    clear(d, p);
    FOR date(TimeEntry t) = maxDate(d, p) AND project(t) = p INLINE DO NEW tn = TimeEntry {
        date(tn) <- d;
        hours(tn) <- hours(t);
        employee(tn) <- employee(t);
        project(tn) <- project(t);
        type(tn) <- type(t);
    }
}

copyApply 'Copy' (DATE d, Project p) {
    ASK 'Copying will delete all time entries for the selected day. Continue ?' IF countTimeEntryProject(d, p) DO
        NEWSESSION APPLY { copy(d, p); }
}

clearApply 'Clear' (DATE d, Project p) {
    ASK 'This action cannot be undone. Continue ?' DO
        NEWSESSION APPLY { clear(d, p); }
};

copyHours 'Copy' (DATE d, Project p) {
    IF NOT autoSaveTimesheetHours() THEN
        copy(d, p);
    ELSE
        copyApply(d, p);
}

clearHours 'Clear' (DATE d, Project p) {
    IF NOT autoSaveTimesheetHours() THEN
        clear(d, p);
    ELSE
        clearApply(d, p);
}

countTimeEntryType (DATE d, Employee e, Project p) = GROUP SUM 1 IF countTimeEntry(d, e, p, TimeEntryType et);

countTimeEntryType (Project p, Employee e, DATE from, DATE to) =
    GROUP SUM 1 IF countTimeEntryType(DATE d, e, p) AND iterate(d, from, to);

countTimeEntryType (Project p, Employee e, INTERVAL[DATE] i) = countTimeEntryType(p, e, from(i), to(i));

hoursTotSpecifiedProject 'Часов без проекта' (DATE d, Employee e) = GROUP SUM hours(TimeEntry t) IF date(t) = d AND employee(t) = e AND NOT project(t);
hoursTimesheet 'Hours' (DATE d, Employee e, Project p)= hours(d, e, p);
hoursTimesheet 'Hours' (DATE d, Project p)= GROUP SUM hours(d, Employee e, p);
hoursTimesheet 'Hours' (DATE d)= GROUP SUM hours(d, Project p);

nameTimeEntryHours 'Time entry' (DATE d, Employee e, Project p) =
    GROUP CONCAT name(timeEntryHours(TimeEntry t)) IF date(t) = d AND employee(t) = e AND project(t) = p AND showName(type(t)), ', ' ORDER t;

trunc = FORMULA INTEGER 'trunc($1)';
stringHours(NUMERIC[8,2] hours) = CONCAT '', IF hours - trunc(hours) < 0.001 THEN trunc(hours) ELSE hours, '';

descriptionTimesheet 'Hours' (DATE d, Employee e, Project p) =
    GROUP CONCAT
    (CONCAT '',
        stringHours(hours(TimeEntry t)) IF NOT showName(type(t)),
        (stringHours(hours(t)) + '(' + nameTimeEntryHours(t) + ')') IF showName(type(t)) AND hours(t) >= 0.001,
        nameTimeEntryHours(t) IF showName(type(t)) AND hours(t) < 0.001)
        IF date(t) = d AND employee(t) = e AND project(t) = p, '+' ORDER t;

backgroundHoursTimesheet 'Hours' (DATE d, Employee e, Project p)=
    IF countTimeEntryType(d, e, p) > 1 THEN RGB(255, 192, 0) ELSE
        OVERRIDE
            IF timesheetProject() THEN rgbColorHoursTimeEntry(timeEntry(d, e, p))
            ELSE rgbColorHoursTimeEntry(timeEntry(d, e, p)),
            RGB(255, 224, 224) IF extractDOWNumber(d) = 0 OR extractDOWNumber(d) = 6;

hours 'Hours' (DATE d) = GROUP SUM hours(TimeEntry t) IF date(t) = d;
timeEntry 'Time Entry' (Employee e, Project p, INTERVAL[DATE] int) =
    GROUP SUM 1 IF hours(TimeEntry t) AND employee(t) = e AND project(t) = p AND date(t) >= from(int) AND date(t) <= to(int)
;

timesheetHours = GROUP MAX TimeEntryHours th IF vacation(th);

vacation (DATE dd, Project p, Employee ep) = GROUP MAX TimeEntry te IF date(te) = dd AND project(te) = p AND employee(te) = ep AND type(te) = type(timesheetHours());
lastVacation (Project p, Employee ep) = GROUP LAST TimeEntry te ORDER date(te) WHERE project(te) = p AND employee(te) = ep AND type(te) = type(timesheetHours());

newVacation (DATE dd, Project p, Employee ep) {
    IF NOT (vacation(dd, p, ep)) THEN
        NEW t = TimeEntry {
            project(t) <- p;
            type(t) <- type(timesheetHours());
            employee(t) <- ep;
            date(t) <- dd;
            hours(t) <- hours(timesheetHours());
            timeEntryHours(t) <- timesheetHours();
        }
}

startVacation 'Start vacation' (Employee ep, Project p, INTERVAL[DATE] dates, DATE d) {
    IF NOT timesheetHours() THEN { MESSAGE 'Please create time entry hour with "vacation" mark. For this go to Projects/Settings/Time entry type.'; BREAK; }

    NEWSESSION {
        IF vacation(d, p, ep) THEN {
            FOR iterate(DATE dd, from(dates), subtract(d, 1)) DO {
                DELETE TimeEntry te WHERE date(te) = dd AND project(te) = p AND employee(te) = ep AND type(te) = type(timesheetHours());
            }
        } ELSE {
            IF (vacation(subtract(d, 1), p, ep)) THEN {
                FOR iterate(DATE dd, d, to(dates)) DO {
                    IF vacation(dd, p, ep) THEN BREAK;
                    newVacation(dd, p, ep);
                }
            } ELSE {
                IF (vacation(subtract(d, -1), p, ep)) THEN {
                    newVacation(d, p, ep);
                } ELSE {
                    FOR iterate(DATE dd, d, to(dates)) DO {
                        IF vacation(dd, p, ep) THEN BREAK;
                        newVacation(dd, p, ep);
                    }
                }
            }
        }
        APPLY;
    }
}

iterateDown(DATE dt, DATE from, DATE to) = RECURSION dt == from AND from IS DATE AND to IS DATE STEP dt == sum($dt, -1) AND dt >= to CYCLES IMPOSSIBLE;

endVaction 'End vacation' (Employee ep, Project p, INTERVAL[DATE] dates, DATE d) {
    IF NOT timesheetHours() THEN { MESSAGE 'Please create time entry hour with "vacation" mark. For this go to Projects/Settings/Time entry type.'; BREAK; }

    NEWSESSION {
        IF vacation(d, p, ep) THEN {
            FOR iterate(DATE dd, subtract(d, -1), to(dates)) DO {
                DELETE TimeEntry te WHERE date(te) = dd AND project(te) = p AND employee(te) = ep AND type(te) = type(timesheetHours());
            }
        } ELSE {
            IF lastVacation(p, ep) THEN {
                IF (d > date(lastVacation(p, ep))) THEN {
                    FOR iterate(DATE dd, subtract(date(lastVacation(p, ep)), -1), d) DO {
                        newVacation(dd, p, ep);
                    }
                } ELSE {
                    FOR iterateDown(DATE dd, d, from(dates)) DO {
                        IF vacation(dd, p, ep) THEN BREAK;
                        newVacation(dd, p, ep);
                    }
                }
            }
        }
        APPLY;
    }
}

delete 'Delete' (Employee ep, Project p, DATE d) {
    NEWSESSION {
        DELETE TimeEntry te WHERE date(te) = d AND project(te) = p AND employee(te) = ep AND type(te) = type(timesheetHours());
        APPLY;
    }
}

EXTEND FORM timesheetSupervisor
    OBJECTS pe = (p = Project, ep = Employee)
    PROPERTIES READONLY name 'Project' = name(p)
    PROPERTIES(ep) READONLY ON CONTEXTMENU clearTimeEntry(p, ep, dates) firstName, lastName, namePosition, rolesTimesheet
    PROPERTIES descriptionTimesheet(d, ep, p) WAIT COLUMNS (d) HEADER extractDay(d) BACKGROUND backgroundHoursTimesheet(d, ep, p)
    ON CHANGE {
        FOR TimeEntryType et = timesheetTimeEntryType() AND (p OR NOT project(timeEntry(d, ep, timesheetTimeEntryType()))) DO {
            IF NOT timesheetTimeEntryHours() THEN {
                INPUT n = hoursTimesheet(d, ep) DO {
                    changeSaveTimesheetHours(d, ep, p, et, n, NULL, autoSaveTimesheetHours());
                }
            } ELSE
                changeSaveTimesheetHours(d, ep, p, et, hours(timesheetTimeEntryHours()), timesheetTimeEntryHours(), autoSaveTimesheetHours());
        } ELSE
        SHOW timesheetSupervisorDateEmployee OBJECTS i = interval(d, d), e = ep FLOAT;
    } ON CONTEXTMENU copyHours(d, p) ON CONTEXTMENU clearHours(d, p) ON CONTEXTMENU startVacation(ep, p, dates, d) ON CONTEXTMENU endVaction(ep, p, dates, d)
    ON CONTEXTMENU delete(ep, p, d)
    FOOTER (IF timesheetProject() THEN hoursTimesheet(d, timesheetProject()) ELSE hoursTimesheet(d))
    FILTERS assigned(p, ep, dates) OR timeEntry(ep, p, dates) OR (NOT countAssignments(p) AND NOT countAssignments(currentUser()))
    FILTERS p == timesheetProject() OR NOT timesheetProject()

    FILTERGROUP onlyFilledTimeEntry
        FILTER 'Только заполненные' countTimeEntryType(p, ep, dates)
;

DESIGN timesheetSupervisor {
    OBJECTS {
        tabbedPane {
            timesheet {
                REMOVE BOX(e);
                MOVE BOX(pe) {
                    caption = '';
                    PROPERTY(descriptionTimesheet(d, ep, p)) {
                        charWidth = 3;
                    }
                }
            }
        }
    }
}
showAllProjects 'Отображать все проекты' = DATA BOOLEAN (Employee);

EXTEND FORM employee
    PROPERTIES showAllProjects(e)
;
DESIGN employee{
    info{
        MOVE PROPERTY (showAllProjects(e));
    }
}
skipCheckAssigned(CustomUser c, Project p) += WHEN showAllProjects(c) AND p IS Project THEN TRUE;
skipCheckAssigned(CustomUser c, Project p) += WHEN manager(p) = c THEN TRUE;

CONSTRAINT SETCHANGED(TimeEntry t IS TimeEntry) AND NOT hours(t) MESSAGE 'В отметке времени обязательно указание часов';
CONSTRAINT DROPPED(hours(TimeEntry t)) AND employee(t) MESSAGE 'В отметке времени обязательно указание часов';

EXTEND FORM timesheetSupervisor
    FILTERS manager(p) = currentUser() OR showProjects(currentUser())

    EVENTS ON INIT {
        timesheetProject() <- IF projectByManager(currentUser()) THEN projectByManager(currentUser());
    }
;
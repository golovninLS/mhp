MODULE TimesheetSupervisorLunch;

REQUIRE TimesheetSupervisor, TimesheetLunch, LunchOrder, ProjectLunchProduct;

PRIORITY Lunch, MasterData;

NAMESPACE ProjectManagement;

CONSTRAINT SETCHANGED(timesheetLunchProduct()) AND timesheetProject() AND NOT in(timesheetProject(), timesheetLunchProduct()) CHECKED BY timesheetLunchProduct[]
    MESSAGE 'Выбранный вид обеда относится к другому проекту';

EXTEND FORM timesheetSupervisor
    PROPERTIES nameTimesheetLunchProduct()
    
    OBJECTS el = Employee
    PROPERTIES(el) READONLY firstName, lastName, namePosition, rolesTimesheet
;

@defineLunchActions(timesheetSupervisor, );

rgbColorProduct (Order o) = rgbColor(product(o));
rgbColorProductOrder 'Symbols' (DATE d, Employee e) = rgbColorProduct(order(d, e));;

countLunchProduct 'Lunch (days)' (Employee e, DATE from, DATE to) =
    GROUP SUM 1 IF productOrder(DATE d, e) AND iterate(d, from, to);
countLunchProduct 'Lunch (days)' (Employee e, INTERVAL[DATE] i) = countLunchProduct(e, from(i), to(i));

EXTEND FORM timesheetSupervisor
    PROPERTIES symbolProductOrder(d, el) WAIT COLUMNS (d) HEADER extractDay(d) BACKGROUND backgroundHoursTimesheet(d, el)
               ON CHANGE {
                   FOR Product lp = timesheetLunchProduct() DO
                       NEWSESSION {
                           FOR Order o = order(d, el) DO {
                               IF product(o) = lp THEN
                                   DELETE o;
                               ELSE
                                   product(o) <- lp;
                           } ELSE {
                               NEW o = Order {
                                   date(o) <- d;
                                   employee(o) <- el;
                                   product(o) <- lp;
                               }
                           }
                        APPLY;
                       }
                   ELSE
                       SHOW timesheetSupervisorDateEmployee OBJECTS i = interval(d, d), e = el FLOAT;
               } ON CONTEXTMENU clearLunch(d) ON CONTEXTMENU fillLunch(d)
                 ON CONTEXTMENU clearLunch(el) ON CONTEXTMENU fillLunch(el)
                 ON CONTEXTMENU copyLunch(d)
    FILTERS assigned(timesheetProject(), el, dates) OR hours(el, timesheetProject(), dates) OR (NOT countAssignments(timesheetProject()) AND NOT countAssignments(currentUser()))   
    
    FILTERGROUP onlyFilledLunch
        FILTER 'Только заполненные' countLunchProduct(el, dates)
;

DESIGN timesheetSupervisor {
    tabbedPane {
        NEW lunch {
            caption = 'Lunches';
            MOVE PROPERTY(nameTimesheetLunchProduct()) { alignment = START; }
            MOVE BOX(el) {
                caption = '';
            }
        }
    }
}
MODULE TimesheetSupervisorPayslip;

REQUIRE TimesheetSupervisorTotal, PayslipLineBatch, ProjectPayslipLine;

NAMESPACE ProjectManagement;

timesheetCompany = DATA LOCAL NESTED Company ();
nameTimesheetCompany 'Company' = name(timesheetCompany());

CONSTRAINT timesheetCompany() AND archived(timesheetCompany())
    CHECKED BY timesheetCompany[] MESSAGE '';

generatePayslips 'Generate' (INTERVAL[DATE] period) {
    NEWSESSION {
        IF NOT payslipBatch(timesheetCompany(), period) THEN NEW b = PayslipBatch {
            company(b) <- timesheetCompany();
            period(b) <- period;
        }
        generate(payslipBatch(timesheetCompany(), period));
        APPLY;
    }    
} CONFIRM;

generatePayslip(Company c, INTERVAL[DATE] d){
    IF NOT payslipBatch(timesheetCompany(), d) THEN NEW b = PayslipBatch {
        company(b) <- timesheetCompany();
        period(b) <- d;
    }
    generate(payslipBatch(timesheetCompany(), d));
    APPLY;
}

splitByProject 'Split by project' = DATA BOOLEAN (PayslipCategory);
EXTEND FORM payslipCategory
    PROPERTIES(c) splitByProject
;
totalTimesheet (Payslip p, PayslipCategory c) = total(p, c, timesheetProject());

payslipTimesheet (Employee e, INTERVAL[DATE] dates) = GROUP MAX Payslip ps IF employee(ps) = e AND startDate(ps) >= from(dates) AND startDate(ps) <= to(dates) AND
    (company(ps) = timesheetCompany() OR NOT timesheetCompany());
totalTimesheet (Employee e, PayslipCategory c, INTERVAL[DATE] dates) = total(payslipTimesheet(e, dates), c, timesheetProject());
totalTimesheet (PayslipCategory c, INTERVAL[DATE] dates) = GROUP SUM total(payslipTimesheet(Employee e, dates), c, timesheetProject());


totalTimesheet 'To pay' (Employee e, Project p, INTERVAL[DATE]  dates) = timesheetSalaryProject(e, p, dates) (+) GROUP SUM totalTimesheet(e, PayslipCategory c, dates) * (IF deduction(c) THEN -1 ELSE 1) IF c IS PayslipCategory AND NOT isTimeEntry(c) AND NOT skip(c); 
totalTimesheet 'To pay' (INTERVAL[DATE] dates, Project p) = GROUP SUM totalTimesheet(Employee e, p, dates);

EXTEND FORM timesheetSupervisor
    OBJECTS pc = PayslipCategory
    PROPERTIES(pc) index
    ORDERS index(pc)
    
    PROPERTIES nameTimesheetCompany(), generatePayslips(dates) SHOWIF timesheetCompany()
    
    OBJECTS ps = Payslip
    PROPERTIES(ps) READONLY number, startDate, endDate, firstNameEmployee, lastNameEmployee, namePositionEmployee, nameCompany, 
                           netWage
    PROPERTIES(ps) NEWSESSION EDIT

    PROPERTIES(ps, pc) total COLUMNS 'total' (pc) HEADER name(pc) SHOWIF NOT timesheetProject() READONLYIF readonly(pc) ON CHANGE {
                        NEWSESSION {
                            changeTotal(ps, pc);
                            APPLY;
                        }
                    }

    PROPERTIES(ps, pc) 'Total (project)' = totalTimesheet COLUMNS 'total' (pc) 
        HEADER name(pc) + '(' + 'Project' + ')' READONLYIF readonly(pc)
        SHOWIF timesheetProject() AND splitByProject(pc)
        ON CHANGE {
            NEWSESSION {
                changeTotal(ps, pc, timesheetProject());
                APPLY;
            }
        }

    FILTERS [FILTER timesheetSupervisor.e](employee(ps)),
            startDate(ps) >= from(dates) AND startDate(ps) <= to(dates),
            company(ps) = timesheetCompany() OR NOT timesheetCompany()
    
    OBJECTS pcT = PayslipCategory
    PROPERTIES (et, pcT, dates) totalTimesheet COLUMNS 'totalSection' (pcT) GRID DRAW te
        HEADER name(pcT) + '(' + name(timesheetProject()) + ')' READONLYIF readonly(pcT) 
        SHOWIF timesheetProject() AND splitByProject(pcT) FOOTER totalTimesheet(pcT, dates)
        ON CHANGE {
            NEWSESSION {
                changeTotal(payslipTimesheet(et, dates), pcT, timesheetProject()); 
                APPLY;
            } 
        }
    PROPERTIES READONLY totalTimesheet(et, tp, dates) LAST FOOTER totalTimesheet(dates, tp)

;

DESIGN timesheetSupervisor {
    tabbedPane {
        NEW payslip {
            caption = 'Payslip';
            REMOVE BOX(pc);
            NEW payslipHeader {
                horizontal = TRUE;
                MOVE PROPERTY(nameTimesheetCompany());
                MOVE PROPERTY(generatePayslips(dates));
            }
            MOVE BOX(ps) {
                caption = '';
            }
        }
    }
}
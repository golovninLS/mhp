MODULE ProjectCustom;

REQUIRE Project, TimesheetCustom, City, ProjectLedger;

NAMESPACE ProjectManagement;

managerTimesheetCloseDate 'Дата закрытия табеля (менеджер)' = DATA DATE (Project);
activeTimesheet(Project p) = (manager(p) = currentUser() AND startDate(p) AND NOT endDate(p) AND NOT managerTimesheetCloseDate(p) == supervisorTimesheetClosingDate()
    OR NOT supervisorTimesheetClosingDate()) AND p IS Project;

background(Project p) += WHEN activeTimesheet(p) AND supervisorTimesheetClosingDate() THEN RGB(224, 224, 255);

countActiveTimesheetProjects () = GROUP SUM 1 IF Project p IS Project AND activeTimesheet(p) AND supervisorTimesheetClosingDate();

city = DATA City (Project);
nameCity 'City' (Project a) = name(city(a));

latitude 'Latitude' (Project a) = latitude(city(a));
longitude 'Longitude' (Project a) = longitude(city(a));

inner 'Внутренний' = DATA BOOLEAN (Project);

//CONSTRAINT (SETCHANGED(date(TimeEntry te)) OR SETCHANGED(project(te)) OR SETCHANGED(hours(te)) OR SETCHANGED(employee(te)) OR SETCHANGED(type(te)) OR SETCHANGED(description(te)) OR DROPPED(te IS TimeEntry)) AND 
//    managerTimesheetCloseDate(project(te)) AND (NOT managerTimesheetCloseDate(project(te)) < date(te) OR NOT managerTimesheetCloseDate(project(te)) < PREV(date(te)))
//    MESSAGE 'Нельзя изменять отметку времени в табеле на дату меньшую даты закрытия табеля(менеджер) проекта';

CONSTRAINT (SETCHANGED(date(TimeEntry te)) OR SETCHANGED(project(te)) OR SETCHANGED(hours(te)) OR SETCHANGED(employee(te)) OR SETCHANGED(type(te)) OR SETCHANGED(description(te)) OR DROPPED(te IS TimeEntry)) AND
    managerTimesheetCloseDate(project(te)) AND (managerTimesheetCloseDate(project(te)) > date(te) OR managerTimesheetCloseDate(project(te)) > PREV(date(te)))
    MESSAGE 'Нельзя изменять отметку времени в табеле на дату меньшую даты закрытия табеля(менеджер) проекта';

CONSTRAINT DROPPED(TimeEntry te IS TimeEntry) AND
    managerTimesheetCloseDate(PREV(project(te))) AND NOT managerTimesheetCloseDate(PREV(project(te))) < PREV(date(te))
    MESSAGE 'Нельзя изменять отметку времени в табеле на дату меньшую даты закрытия табеля(менеджер) проекта';

EXTEND FORM project
    PROPERTIES(p) managerTimesheetCloseDate, nameCity, inner

    OBJECTS pp = Project MAP
    PROPERTIES(pp) name READONLY, latitude, longitude
    FILTERS pp = p
;

DESIGN project {
    caption = badged('Project', name(p));
    header {
        headerLeft {
            MOVE PROPERTY(nameCity(p));
            MOVE PROPERTY(inner(p));
        }
        headerRight {
            MOVE PROPERTY(managerTimesheetCloseDate(p));
        }
    }
    details {
        NEW staff {
            tabbed = TRUE;
            fill = 1;
            caption = 'Staff';
        }

        MOVE BOX(pp) { caption = 'Map'; }
    }
}

EXTEND FORM projects
    PROPERTIES() READONLY supervisorTimesheetClosingDate PANEL
    PROPERTIES(p) READONLY managerTimesheetCloseDate, nameCity AFTER nameManager(p)
;

NAVIGATOR {
    operations {
        projects HEADER badged('Проекты', countActiveTimesheetProjects());
    }
}

lastTimeEntry (Employee e) = GROUP LAST TimeEntry t ORDER date(t) IF employee(t) = e AND hours(t) > 0 AND date(t) >= subtract(currentDate(), 3) AND date(t) <= currentDate();
work (Employee e, Project p) = [GROUP MAX TimeEntry t IF date(t) = date(lastTimeEntry(e)) AND hours(t) > 0 BY employee(t), project(t)](e, p);
qtyEmployee 'Amount employees' (Project p) = GROUP SUM 1 IF work(Employee e, p);

qtyEmployeeFiltered 'Total qty employees' = GROUP SUM qtyEmployee(Project p) IF filtered(p);

EXTEND FORM projects
    PROPERTIES (p) qtyEmployee
    PROPERTIES () qtyEmployeeFiltered TOOLBAR DRAW p
;

DESIGN projects {
    PROPERTY (qtyEmployee(p)) { charWidth = 10; }
    TOOLBARLEFT (p) {
        MOVE PROPERTY (qtyEmployeeFiltered());
    }
}

//files

dateDoc 'Date document' = DATA DATE (ProjectFile);

EXTEND FORM project
    PROPERTIES (of) dateDoc
;

CLASS PlannedRevenue 'Planned revenue';

project 'Project' = DATA Project (PlannedRevenue);
plannedRevenue 'Planned revenue' = DATA NUMERIC[16,2] (PlannedRevenue);
month 'Month' = DATA Month (PlannedRevenue);
revenueMonth 'Month' (PlannedRevenue p) = number(month(p));
revenueYear 'Year' = DATA INTEGER (PlannedRevenue);
planned = GROUP MAX PlannedRevenue pr BY project(pr), INTERVAL[DATE] d
    IF month(pr) = extractMonth(to(d)) AND revenueYear(pr) = extractYear(to(d));
projectRevenue 'Planned revenue' (Project p, INTERVAL[DATE] d) = plannedRevenue(planned(p, d));
projectRevenue 'Planned revenue' (INTERVAL[DATE] d) = GROUP SUM projectRevenue(Project p, d) IF filtered(p);

uniqueByPeriod = GROUP AGGR PlannedRevenue pr BY project(pr), month(pr), revenueYear(pr);

EXTEND FORM project
    OBJECTS pr = PlannedRevenue
    PROPERTIES (pr) plannedRevenue, revenueMonth, revenueYear
    PROPERTIES (pr) NEW, DELETE
    FILTERS project(pr) = p
;

DESIGN project {
    details {
        NEW revenue LAST {
            caption = 'Planned revenue';
            MOVE BOX (pr) {
                caption = '';
                fill = 1;
                panelCaptionAlignment = START ;
            };
        }
    }
}

EXTEND FORM projects
    PROPERTIES (p, dates) projectRevenue FOOTER projectRevenue(dates)
;

in 'Вкл.' = DATA BOOLEAN (Project, Employee);
managers (Project p) = GROUP SUM 1 IF in(p, Employee e);

managersIn 'Менеджеры' (Project p) = GROUP CONCAT MasterData.name(Employee e) IF in(p, e), ', ' ORDER e CHARWIDTH 20;

FORM dialogEmployees 'Employees'
    OBJECTS p = Project PANEL

    OBJECTS e = Employee
    PROPERTIES in(p, e)
    PROPERTIES(e) READONLY name[Partner] SELECTOR
;

EXTEND FORM project
    PROPERTIES(p) managersIn ON CHANGE { DIALOG dialogEmployees OBJECTS p = p; }
;

DESIGN project {
    REMOVE PROPERTY (nameManager(p));
    headerRight {
        MOVE PROPERTY (managersIn(p));
    }
}

onStarted() + {
    FOR NOT managers(Project p) AND Employee e = manager(p) DO {
        in(p, e) <- TRUE;
    }
}

EXTEND FORM projects PROPERTIES(p) READONLY managersIn AFTER nameType(p);
DESIGN projects {
    PROPERTY (nameManager(p)) { hide = TRUE; };
}

projectStatus 'Статус проекта' (Project p, INTERVAL[DATE] d) = IF managerTimesheetCloseDate(p) <= to(d) THEN 'Closed' ELSE 'Opened';
backgroundProject (Project p, INTERVAL[DATE] d) = IF managerTimesheetCloseDate(p) <= to(d) THEN #ccffcc ELSE #ffffff;

EXTEND FORM projects
    PROPERTIES (p, dates) projectStatus AFTER managerTimesheetCloseDate(p)
;

DESIGN projects {
    PROPERTY (nameManager(p)) { hide = TRUE; }
    REMOVE PROPERTY (nameManager(p));
    PROPERTY (managerTimesheetCloseDate(p)) { background = backgroundProject(p, dates); }
    PROPERTY (projectStatus(p, dates)) { background = backgroundProject(p, dates); }
    PROPERTY (nameCity(p)) { background = backgroundProject(p, dates); }
    PROPERTY (name(p)) { background = backgroundProject(p, dates); }
    PROPERTY (qtyEmployee(p)) { background = backgroundProject(p, dates); }
    PROPERTY (nameType(p)) { background = backgroundProject(p, dates); }
    PROPERTY (projectRevenue(p, dates)) { background = backgroundProject(p, dates); }
    PROPERTY (hoursTimeEntry(p)) { background = backgroundProject(p, dates); }
    PROPERTY (countTimeEntry(p)) { background = backgroundProject(p, dates); }
    PROPERTY (sumProfit(p, dates)) { background = backgroundProject(p, dates); }
    PROPERTY (sumExpense(p, dates)) { background = backgroundProject(p, dates); }
    PROPERTY (balance(p, dates)) { background = backgroundProject(p, dates); }
    PROPERTY (number(p)) { background = backgroundProject(p, dates); }
    PROPERTY (startDate(p)) { background = backgroundProject(p, dates); }
    PROPERTY (endDate(p)) { background = backgroundProject(p, dates); }
    PROPERTY (namePartner(p)) { background = backgroundProject(p, dates); }
    PROPERTY (managersIn(p)) { background = backgroundProject(p, dates); }
    PROPERTY (nameCompany(p)) { background = backgroundProject(p, dates); }
}
MODULE ProjectGanttChart;

REQUIRE FrappeGantt, Time, Icon, TaskCustom, TaskStatus;

NAMESPACE ProjectManagement;

id = DATA STRING (Task);
start 'Start' = DATA DATE (Task);
end 'Deadline'  = DATA DATE (Task);

progress 'Progress' = DATA INTEGER (Task);

depends 'Подзадачи' = DATA BOOLEAN (Task, Task);
idChildren (Task parent) = GROUP CONCAT id(Task child), ',' IF depends(parent, child) AND NOT parent = child ORDER child;

order = DATA INTEGER (Task);
index = PARTITION SUM 1 ORDER order(Task t), t;
task (INTEGER i) = GROUP MAX Task t BY index(t);

moveUp 'Move Up' (Task t) {
    FOR INTEGER i = index(t) AND INTEGER o = order(task(i)) AND Task st = task(i - 1) DO {
        order(t) <- order(st);
        order(st) <- o;
    }
}

moveDown 'Move Down' (Task t) {
    FOR INTEGER i = index(t) AND INTEGER o = order(task(i)) AND Task st = task(i + 1) DO {
        order(t) <- order(st);
        order(st) <- o;
    }
}

deadline(Task t) += end(t);

WHEN LOCAL SET(Task t IS Task) AND NOT id(t) DO id(t) <- STRING(t);
WHEN LOCAL SETCHANGED(Task t IS Task) AND NOT order(t) DO order(t) <- [GROUP MAX order(Task tt)]() (+) 1;
//WHEN LOCAL SETCHANGED(Task t IS Task) AND NOT name(t) DO name(t) <- 'Task ' + order(t);
WHEN LOCAL SETCHANGED(Task t IS Task) AND NOT start(t) DO start(t) <- currentDate();
WHEN LOCAL SETCHANGED(Task t IS Task) AND NOT end(t) DO end(t) <- currentDate();

FORM dialogTasks 'Tasks'
    OBJECTS t = Task

    OBJECTS t1 = Task
    PROPERTIES depends(t, t1)
    PROPERTIES(t1) READONLY name, nameStatus, deadline
    FILTERS t != t1
;

DESIGN dialogTasks { size = (600, 500); }

tasksIn 'Подзадачи' (Task t) = GROUP CONCAT name(Task t1) IF depends(t, t1), ', ' ORDER t CHARWIDTH 20;

EXTEND FORM tasks
    OBJECTS tg = Task CUSTOM 'gantt_day'

    PROPERTIES(tg) id, name, start, end, progress, order, dependencies = idChildren
    PROPERTIES(tg) NEW
    ORDERS order(tg)

    PROPERTIES(tg) PANEL tgname = name, pprogress = progress, pproject = nameProject, pAuthor = nameAuthor, pAssigned = nameAssignedTo,
        pstart = start, pend = end, ppriority = namePriority, tgtags = tags, pclosed = closed, pstatus = nameStatus,
        pchildren = tasksIn ON CHANGE {DIALOG dialogTasks OBJECTS t = tg; }
    PROPERTIES(tg) PANEL moveUp, moveDown, gdelete = DELETE

    FILTERS [FILTER tasks.t](tg)
;

DESIGN tasks {
    tabbedPane {
        NEW gantt LAST {
            fill = 1;
            caption = 'Диаграмма Ганта';
            MOVE GRID(tg) {
                fill = 1;
                size = (200, 200);
                NEW header {
                    alignment = STRETCH;
                    horizontal = TRUE;
                    NEW box1 {
                        MOVE PROPERTY(tgname);
                        MOVE PROPERTY(pproject);
                        MOVE PROPERTY(pAuthor);
                        MOVE PROPERTY(pAssigned);
                        MOVE PROPERTY(pstart);
                        MOVE PROPERTY(pend);
                    }
                    NEW box2 {
                        MOVE PROPERTY(pstatus);
                        MOVE PROPERTY(pprogress);
                        MOVE PROPERTY(ppriority);
                        MOVE PROPERTY(tgtags);
                        MOVE PROPERTY(pclosed);
                        MOVE PROPERTY(pchildren);
                    }
                }
                NEW actions1 {
                    alignment = STRETCH;
                    horizontal = TRUE;
                    fill = 1;
                    MOVE PROPERTY(moveUp(tg)) { fill = 1; };
                    MOVE PROPERTY(moveDown(tg)) { fill = 1; };
                    MOVE PROPERTY(gdelete) { fill = 1; };
                }
                REMOVE TOOLBARSYSTEM(tg);
                REMOVE BOX(tg);
            }
        }
    }
}

onStarted() + {
    FOR Task t IS Task AND NOT id(t) DO id(t) <- STRING(t);
    FOR Task t IS Task AND NOT end(t) DO end(t) <- currentDate();
    FOR Task t IS Task AND NOT start(t) DO start(t) <- OVERRIDE end(t), currentDate();
    FOR Task t IS Task AND NOT order(t) DO {
        order(t) <- [GROUP MAX order(Task tt)]() (+) 1;
    }
    APPLY;
}

startDate(Task t) += start(t);
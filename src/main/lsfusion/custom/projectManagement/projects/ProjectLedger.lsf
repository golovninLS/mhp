MODULE ProjectLedger;

REQUIRE Project, DateUtils, SalesAccount;

NAMESPACE ProjectManagement;

CLASS ABSTRACT ProjectLedger 'Project ledger';
TABLE projectLedger (ProjectLedger);

active '{Active}' = ABSTRACT BOOLEAN (ProjectLedger);

class 'Type' (ProjectLedger l) = objectClassName(l) IF l IS ProjectLedger CHARWIDTH 15;

project 'Project' = ABSTRACT Project (ProjectLedger) MATERIALIZED;
nameProject 'Project' (ProjectLedger l) = name(project(l));

number 'Number' = ABSTRACT STRING[31] (ProjectLedger) MATERIALIZED;

date 'Date' = ABSTRACT DATE (ProjectLedger) MATERIALIZED;
@defineDateAggregation(ProjectLedger, , );

INDEX project (ProjectLedger l), date(l);

//// type
//CLASS ProjectLedgerType 'Project ledger type' {
//    none 'None'
//}
//TABLE projectLedgerType (ProjectLedgerType);
//
//name '{master.data.name}' (ProjectLedgerType o) = staticCaption(o) IF o IS ProjectLedgerType CHARWIDTH 15;
//
//FORM dialogProjectLedgerTypes 'Project ledger type'
//    OBJECTS o = ProjectLedgerType
//    PROPERTIES(o) READONLY name
//    
//    LIST ProjectLedgerType OBJECT o
//;
//
//type = ABSTRACT ProjectLedgerType (ProjectLedger) MATERIALIZED;
//nameType 'Type' (ProjectLedger l) = name(type(l));

filtered (Project p) = FILTER projects.p;

partner 'Partner' = ABSTRACT Partner (ProjectLedger) MATERIALIZED;
namePartner 'Partner' (ProjectLedger l) = name(partner(l));

category 'Category' = ABSTRACT ISTRING (ProjectLedger) MATERIALIZED;

description 'Description' = ABSTRACT ISTRING (ProjectLedger) MATERIALIZED;

income 'Income' = ABSTRACT NUMERIC[16,2] (ProjectLedger) MATERIALIZED;
expense 'Expense' = ABSTRACT NUMERIC[16,2] (ProjectLedger) MATERIALIZED;
profit 'Profit' (ProjectLedger l) = income(l) (-) expense(l);

sumExpense 'Сумма затрат' (Project p, INTERVAL[DATE] i) = 
    GROUP SUM expense(ProjectLedger l) IF expense(l) > 0 AND active(l) AND date(l) >= from(i) AND date(l) <= to(i) BY project(l);
sumExpense 'Сумма затрат' (Project p) =
    GROUP SUM expense(ProjectLedger l) IF expense(l) > 0  AND active(l) BY project(l);

sumProfit 'Сумма прибыли' (Project p, INTERVAL[DATE] i) = 
    GROUP SUM profit(ProjectLedger l) IF profit(l) > 0 AND active(l) AND date(l) >= from(i) AND date(l) <= to(i) BY project(l);
sumProfit 'Сумма прибыли' (Project p) = 
    GROUP SUM profit(ProjectLedger l) IF profit(l) > 0 AND active(l) BY project(l);

sumExpense 'Сума затрат' (INTERVAL[DATE] i) = IF i IS INTERVAL[DATE] THEN 
    GROUP SUM sumExpense(Project p, i) IF filtered(p) ELSE 
    GROUP SUM sumExpense(Project p) IF filtered(p)
;

sumProfit 'Сума затрат' (INTERVAL[DATE] i) = IF i IS INTERVAL[DATE] THEN
    GROUP SUM sumProfit(Project p, i) IF filtered(p) ELSE
    GROUP SUM sumProfit(Project p) IF filtered(p)
;
account = ABSTRACT SalesAccount (ProjectLedger) MATERIALIZED;
nameAccount 'Sales account' (ProjectLedger l) = name(account(l));

accountObject 'Account object' = ABSTRACT STRING (ProjectLedger) MATERIALIZED;

EXTEND FORM project
    OBJECTS i = INTERVAL[DATE] PANEL NULL
    PROPERTIES i = VALUE(i)
    PROPERTIES (p, i) SHOWIF i IS INTERVAL[DATE] sumExpense FOOTER sumExpense(i), sumProfit FOOTER sumProfit(i)
    PROPERTIES (p) SHOWIF NOT i IS INTERVAL[DATE] sumExpense FOOTER sumExpense(i), sumProfit FOOTER sumProfit(i)
    
    OBJECTS prl = ProjectLedger
    PROPERTIES(prl) READONLY class, date, number, nameProject, namePartner, category, description, nameAccount, income, expense, profit, accountObject
    PROPERTIES(prl) EDIT
    FILTERS project(prl) = p,
            active(prl),
            date(prl) >= from(i) AND date(prl) <= to(i) OR NOT i
;

DESIGN project {
    details {
        NEW projectLedger {
            fill = 1;
            caption = 'Project ledger';
            NEW dates {
                horizontal = TRUE;
                MOVE PROPERTY(i){caption = '';};
                MOVE PROPERTY(sumExpense(p, i));
                MOVE PROPERTY(sumExpense(p));
                MOVE PROPERTY(sumProfit(p, i));
                MOVE PROPERTY(sumProfit(p));
            }
            MOVE BOX(prl) {
                caption = '';
            }
        }
    }
}



filterProject (Project p, INTERVAL[DATE]  dates) = startDate(p) <= to(dates) AND (NOT(endDate(p) < from(dates)) OR NOT endDate(p) OR NOT dates);
balance 'Balance' (Project p, INTERVAL[DATE] dates) = IF dates IS INTERVAL[DATE] THEN sumProfit(p, dates) (-) sumExpense(p, dates)
    ELSE sumProfit(p) (-) sumExpense(p)
;
balance(INTERVAL[DATE] dates) = IF dates IS INTERVAL[DATE] THEN GROUP SUM balance(Project p, dates) ELSE 
    GROUP SUM (sumProfit(Project p) (-) sumExpense(p)) IF filtered(p)
;

EXTEND FORM projects
    OBJECTS dates = INTERVAL[DATE] PANEL NULL BEFORE p
    PROPERTIES i = VALUE(dates)
    PROPERTIES (p, dates) GRID DRAW p SHOWIF dates IS INTERVAL[DATE] sumExpense FOOTER sumExpense(dates), sumProfit FOOTER sumProfit(dates)
    PROPERTIES (p) GRID DRAW p SHOWIF NOT dates IS INTERVAL[DATE] sumExpense, sumProfit
    PROPERTIES balance(p, dates) FOOTER balance(dates)
    
    PROPERTIES prevInterval '<' = { SEEK projects.dates = prevMonthInterval(dates); },
        nextInterval '>' = { SEEK projects.dates = nextMonthInterval(dates); },
        dropInterval 'X' = { SEEK NULL projects.dates; }
    EVENTS ON INIT {
        SEEK projects.dates = interval(firstDayOfMonth(currentDate()), lastDayOfMonth(currentDate()));
    }
    
    FILTERS filterProject(p, dates) OR NOT dates
;

DESIGN projects{
    tabbedPane{
        NEW projects{
            caption = '{Projects}';
            NEW dates {
                alignment = STRETCH;
                horizontal = TRUE;
                MOVE PROPERTY (prevInterval);
                MOVE PROPERTY (i) {caption = ''; };
                MOVE PROPERTY (nextInterval);
                MOVE PROPERTY (dropInterval);
            }
            MOVE BOX (p){
                caption = '';
            };
        }
    }
}
MODULE OutgoingPaymentCanceled;

REQUIRE OutgoingPaymentDone;

NAMESPACE Invoicing;
    
EXTEND CLASS OutgoingPaymentStatus {
    canceled 'Cancelled'
}
canceled 'Cancelled' = DATA BOOLEAN (OutgoingPayment);
active '{Active}' (OutgoingPayment s) = (ready(s) OR done(s)) AND NOT canceled(s);

status(OutgoingPayment s) += WHEN canceled(s) THEN OutgoingPaymentStatus.canceled;
color(OutgoingPaymentStatus s) += WHEN s = OutgoingPaymentStatus.canceled THEN RGB(181,195,247);

cancel 'Cancel' (OutgoingPayment s) {
    APPLY; 
    IF canceled() THEN RETURN;
           
    NEWSESSION {
        canceled(s) <- TRUE;
        APPLY;
    }
}

EXTEND FORM outgoingPayment
    PROPERTIES(p) cancel SHOWIF NOT (status(p) = OutgoingPaymentStatus.draft OR status(p) = OutgoingPaymentStatus.canceled), canceled 
;

DESIGN outgoingPayment {
    secondaryActions {
        MOVE PROPERTY(cancel(p)) { valueClass = 'btn-danger'; }
    }             
    statusGroup {
        MOVE PROPERTY(canceled(p)) {
            valueClass = 'btn-check';
            captionClass = 'btn btn-outline-primary btn-arrow-right';
        }                               
    }    
}

EXTEND FORM outgoingPayments    
    EXTEND FILTERGROUP status
        FILTER 'Cancelled' status(p) = OutgoingPaymentStatus.canceled    
;
